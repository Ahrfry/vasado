-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi_stream_pass_alt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mlx2sbu_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    mlx2sbu_TVALID : IN STD_LOGIC;
    mlx2sbu_TREADY : OUT STD_LOGIC;
    mlx2sbu_TKEEP : IN STD_LOGIC_VECTOR (31 downto 0);
    mlx2sbu_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    mlx2sbu_TID : IN STD_LOGIC_VECTOR (2 downto 0);
    mlx2sbu_TUSER : IN STD_LOGIC_VECTOR (11 downto 0);
    sbu2mlx_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    sbu2mlx_TVALID : OUT STD_LOGIC;
    sbu2mlx_TREADY : IN STD_LOGIC;
    sbu2mlx_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
    sbu2mlx_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    sbu2mlx_TID : OUT STD_LOGIC_VECTOR (2 downto 0);
    sbu2mlx_TUSER : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of axi_stream_pass_alt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Out_V_data_V_1_data_out : STD_LOGIC_VECTOR (255 downto 0);
    signal Out_V_data_V_1_vld_in : STD_LOGIC;
    signal Out_V_data_V_1_vld_out : STD_LOGIC;
    signal Out_V_data_V_1_ack_in : STD_LOGIC;
    signal Out_V_data_V_1_ack_out : STD_LOGIC;
    signal Out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (255 downto 0);
    signal Out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (255 downto 0);
    signal Out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal Out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal Out_V_data_V_1_sel : STD_LOGIC;
    signal Out_V_data_V_1_load_A : STD_LOGIC;
    signal Out_V_data_V_1_load_B : STD_LOGIC;
    signal Out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal Out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_V_keep_V_1_vld_in : STD_LOGIC;
    signal Out_V_keep_V_1_vld_out : STD_LOGIC;
    signal Out_V_keep_V_1_ack_in : STD_LOGIC;
    signal Out_V_keep_V_1_ack_out : STD_LOGIC;
    signal Out_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal Out_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal Out_V_keep_V_1_sel : STD_LOGIC;
    signal Out_V_keep_V_1_load_A : STD_LOGIC;
    signal Out_V_keep_V_1_load_B : STD_LOGIC;
    signal Out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Out_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal Out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_V_last_V_1_vld_in : STD_LOGIC;
    signal Out_V_last_V_1_vld_out : STD_LOGIC;
    signal Out_V_last_V_1_ack_in : STD_LOGIC;
    signal Out_V_last_V_1_ack_out : STD_LOGIC;
    signal Out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal Out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal Out_V_last_V_1_sel : STD_LOGIC;
    signal Out_V_last_V_1_load_A : STD_LOGIC;
    signal Out_V_last_V_1_load_B : STD_LOGIC;
    signal Out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal Out_V_id_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal Out_V_id_V_1_vld_in : STD_LOGIC;
    signal Out_V_id_V_1_vld_out : STD_LOGIC;
    signal Out_V_id_V_1_ack_in : STD_LOGIC;
    signal Out_V_id_V_1_ack_out : STD_LOGIC;
    signal Out_V_id_V_1_payload_A : STD_LOGIC_VECTOR (2 downto 0);
    signal Out_V_id_V_1_payload_B : STD_LOGIC_VECTOR (2 downto 0);
    signal Out_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal Out_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal Out_V_id_V_1_sel : STD_LOGIC;
    signal Out_V_id_V_1_load_A : STD_LOGIC;
    signal Out_V_id_V_1_load_B : STD_LOGIC;
    signal Out_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Out_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal Out_V_user_V_1_data_out : STD_LOGIC_VECTOR (11 downto 0);
    signal Out_V_user_V_1_vld_in : STD_LOGIC;
    signal Out_V_user_V_1_vld_out : STD_LOGIC;
    signal Out_V_user_V_1_ack_in : STD_LOGIC;
    signal Out_V_user_V_1_ack_out : STD_LOGIC;
    signal Out_V_user_V_1_payload_A : STD_LOGIC_VECTOR (11 downto 0);
    signal Out_V_user_V_1_payload_B : STD_LOGIC_VECTOR (11 downto 0);
    signal Out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal Out_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal Out_V_user_V_1_sel : STD_LOGIC;
    signal Out_V_user_V_1_load_A : STD_LOGIC;
    signal Out_V_user_V_1_load_B : STD_LOGIC;
    signal Out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Out_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal mlx2sbu_TDATA_blk_n : STD_LOGIC;
    signal tmp_nbreadreq_fu_38_p7 : STD_LOGIC_VECTOR (0 downto 0);
    signal sbu2mlx_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_reg_112 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_346 : BOOLEAN;
    signal ap_condition_391 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    Out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Out_V_data_V_1_ack_out) and (ap_const_logic_1 = Out_V_data_V_1_vld_out))) then 
                                        Out_V_data_V_1_sel_rd <= not(Out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    Out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Out_V_data_V_1_vld_in) and (ap_const_logic_1 = Out_V_data_V_1_ack_in))) then 
                                        Out_V_data_V_1_sel_wr <= not(Out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    Out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = Out_V_data_V_1_vld_in) and (ap_const_logic_1 = Out_V_data_V_1_ack_out) and (Out_V_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = Out_V_data_V_1_vld_in) and (Out_V_data_V_1_state = ap_const_lv2_2)))) then 
                    Out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = Out_V_data_V_1_vld_in) and (ap_const_logic_0 = Out_V_data_V_1_ack_out) and (Out_V_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = Out_V_data_V_1_ack_out) and (Out_V_data_V_1_state = ap_const_lv2_1)))) then 
                    Out_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = Out_V_data_V_1_vld_in) and (Out_V_data_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = Out_V_data_V_1_ack_out) and (Out_V_data_V_1_state = ap_const_lv2_1)) or ((Out_V_data_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = Out_V_data_V_1_vld_in) and (ap_const_logic_0 = Out_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = Out_V_data_V_1_vld_in) and (ap_const_logic_1 = Out_V_data_V_1_ack_out)))))) then 
                    Out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    Out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    Out_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Out_V_id_V_1_ack_out) and (ap_const_logic_1 = Out_V_id_V_1_vld_out))) then 
                                        Out_V_id_V_1_sel_rd <= not(Out_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    Out_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Out_V_id_V_1_vld_in) and (ap_const_logic_1 = Out_V_id_V_1_ack_in))) then 
                                        Out_V_id_V_1_sel_wr <= not(Out_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    Out_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = Out_V_id_V_1_vld_in) and (ap_const_logic_1 = Out_V_id_V_1_ack_out) and (ap_const_lv2_3 = Out_V_id_V_1_state)) or ((ap_const_logic_0 = Out_V_id_V_1_vld_in) and (ap_const_lv2_2 = Out_V_id_V_1_state)))) then 
                    Out_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = Out_V_id_V_1_vld_in) and (ap_const_logic_0 = Out_V_id_V_1_ack_out) and (ap_const_lv2_3 = Out_V_id_V_1_state)) or ((ap_const_logic_0 = Out_V_id_V_1_ack_out) and (ap_const_lv2_1 = Out_V_id_V_1_state)))) then 
                    Out_V_id_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = Out_V_id_V_1_vld_in) and (ap_const_lv2_2 = Out_V_id_V_1_state)) or ((ap_const_logic_1 = Out_V_id_V_1_ack_out) and (ap_const_lv2_1 = Out_V_id_V_1_state)) or ((ap_const_lv2_3 = Out_V_id_V_1_state) and not(((ap_const_logic_1 = Out_V_id_V_1_vld_in) and (ap_const_logic_0 = Out_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = Out_V_id_V_1_vld_in) and (ap_const_logic_1 = Out_V_id_V_1_ack_out)))))) then 
                    Out_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    Out_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    Out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Out_V_keep_V_1_ack_out) and (ap_const_logic_1 = Out_V_keep_V_1_vld_out))) then 
                                        Out_V_keep_V_1_sel_rd <= not(Out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    Out_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Out_V_keep_V_1_vld_in) and (ap_const_logic_1 = Out_V_keep_V_1_ack_in))) then 
                                        Out_V_keep_V_1_sel_wr <= not(Out_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    Out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = Out_V_keep_V_1_vld_in) and (ap_const_logic_1 = Out_V_keep_V_1_ack_out) and (ap_const_lv2_3 = Out_V_keep_V_1_state)) or ((ap_const_logic_0 = Out_V_keep_V_1_vld_in) and (ap_const_lv2_2 = Out_V_keep_V_1_state)))) then 
                    Out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = Out_V_keep_V_1_vld_in) and (ap_const_logic_0 = Out_V_keep_V_1_ack_out) and (ap_const_lv2_3 = Out_V_keep_V_1_state)) or ((ap_const_logic_0 = Out_V_keep_V_1_ack_out) and (ap_const_lv2_1 = Out_V_keep_V_1_state)))) then 
                    Out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = Out_V_keep_V_1_vld_in) and (ap_const_lv2_2 = Out_V_keep_V_1_state)) or ((ap_const_logic_1 = Out_V_keep_V_1_ack_out) and (ap_const_lv2_1 = Out_V_keep_V_1_state)) or ((ap_const_lv2_3 = Out_V_keep_V_1_state) and not(((ap_const_logic_1 = Out_V_keep_V_1_vld_in) and (ap_const_logic_0 = Out_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = Out_V_keep_V_1_vld_in) and (ap_const_logic_1 = Out_V_keep_V_1_ack_out)))))) then 
                    Out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    Out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    Out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Out_V_last_V_1_ack_out) and (ap_const_logic_1 = Out_V_last_V_1_vld_out))) then 
                                        Out_V_last_V_1_sel_rd <= not(Out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    Out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Out_V_last_V_1_vld_in) and (ap_const_logic_1 = Out_V_last_V_1_ack_in))) then 
                                        Out_V_last_V_1_sel_wr <= not(Out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    Out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = Out_V_last_V_1_vld_in) and (ap_const_logic_1 = Out_V_last_V_1_ack_out) and (ap_const_lv2_3 = Out_V_last_V_1_state)) or ((ap_const_logic_0 = Out_V_last_V_1_vld_in) and (ap_const_lv2_2 = Out_V_last_V_1_state)))) then 
                    Out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = Out_V_last_V_1_vld_in) and (ap_const_logic_0 = Out_V_last_V_1_ack_out) and (ap_const_lv2_3 = Out_V_last_V_1_state)) or ((ap_const_logic_0 = Out_V_last_V_1_ack_out) and (ap_const_lv2_1 = Out_V_last_V_1_state)))) then 
                    Out_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = Out_V_last_V_1_vld_in) and (ap_const_lv2_2 = Out_V_last_V_1_state)) or ((ap_const_logic_1 = Out_V_last_V_1_ack_out) and (ap_const_lv2_1 = Out_V_last_V_1_state)) or ((ap_const_lv2_3 = Out_V_last_V_1_state) and not(((ap_const_logic_1 = Out_V_last_V_1_vld_in) and (ap_const_logic_0 = Out_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = Out_V_last_V_1_vld_in) and (ap_const_logic_1 = Out_V_last_V_1_ack_out)))))) then 
                    Out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    Out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    Out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Out_V_user_V_1_ack_out) and (ap_const_logic_1 = Out_V_user_V_1_vld_out))) then 
                                        Out_V_user_V_1_sel_rd <= not(Out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    Out_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = Out_V_user_V_1_vld_in) and (ap_const_logic_1 = Out_V_user_V_1_ack_in))) then 
                                        Out_V_user_V_1_sel_wr <= not(Out_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    Out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                Out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = Out_V_user_V_1_vld_in) and (ap_const_logic_1 = Out_V_user_V_1_ack_out) and (ap_const_lv2_3 = Out_V_user_V_1_state)) or ((ap_const_logic_0 = Out_V_user_V_1_vld_in) and (ap_const_lv2_2 = Out_V_user_V_1_state)))) then 
                    Out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = Out_V_user_V_1_vld_in) and (ap_const_logic_0 = Out_V_user_V_1_ack_out) and (ap_const_lv2_3 = Out_V_user_V_1_state)) or ((ap_const_logic_0 = Out_V_user_V_1_ack_out) and (ap_const_lv2_1 = Out_V_user_V_1_state)))) then 
                    Out_V_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = Out_V_user_V_1_vld_in) and (ap_const_lv2_2 = Out_V_user_V_1_state)) or ((ap_const_logic_1 = Out_V_user_V_1_ack_out) and (ap_const_lv2_1 = Out_V_user_V_1_state)) or ((ap_const_lv2_3 = Out_V_user_V_1_state) and not(((ap_const_logic_1 = Out_V_user_V_1_vld_in) and (ap_const_logic_0 = Out_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = Out_V_user_V_1_vld_in) and (ap_const_logic_1 = Out_V_user_V_1_ack_out)))))) then 
                    Out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    Out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = Out_V_data_V_1_load_A)) then
                Out_V_data_V_1_payload_A <= mlx2sbu_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = Out_V_data_V_1_load_B)) then
                Out_V_data_V_1_payload_B <= mlx2sbu_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = Out_V_id_V_1_load_A)) then
                Out_V_id_V_1_payload_A <= mlx2sbu_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = Out_V_id_V_1_load_B)) then
                Out_V_id_V_1_payload_B <= mlx2sbu_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = Out_V_keep_V_1_load_A)) then
                Out_V_keep_V_1_payload_A <= mlx2sbu_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = Out_V_keep_V_1_load_B)) then
                Out_V_keep_V_1_payload_B <= mlx2sbu_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = Out_V_last_V_1_load_A)) then
                Out_V_last_V_1_payload_A <= mlx2sbu_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = Out_V_last_V_1_load_B)) then
                Out_V_last_V_1_payload_B <= mlx2sbu_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = Out_V_user_V_1_load_A)) then
                Out_V_user_V_1_payload_A <= mlx2sbu_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = Out_V_user_V_1_load_B)) then
                Out_V_user_V_1_payload_B <= mlx2sbu_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_condition_346 = ap_const_boolean_1) or (not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and (ap_const_logic_0 = Out_V_data_V_1_ack_in)))))) then
                tmp_reg_112 <= tmp_nbreadreq_fu_38_p7;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, Out_V_data_V_1_ack_in, tmp_nbreadreq_fu_38_p7, tmp_reg_112, ap_condition_346, ap_condition_391)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not(((ap_condition_346 = ap_const_boolean_1) or (not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and (ap_const_logic_0 = Out_V_data_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not(((ap_condition_391 = ap_const_boolean_1) or (not((ap_const_lv1_0 = tmp_reg_112)) and (ap_const_logic_0 = Out_V_data_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    Out_V_data_V_1_ack_in <= Out_V_data_V_1_state(1);
    Out_V_data_V_1_ack_out <= sbu2mlx_TREADY;

    Out_V_data_V_1_data_out_assign_proc : process(Out_V_data_V_1_payload_A, Out_V_data_V_1_payload_B, Out_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = Out_V_data_V_1_sel)) then 
            Out_V_data_V_1_data_out <= Out_V_data_V_1_payload_B;
        else 
            Out_V_data_V_1_data_out <= Out_V_data_V_1_payload_A;
        end if; 
    end process;

    Out_V_data_V_1_load_A <= (Out_V_data_V_1_state_cmp_full and not(Out_V_data_V_1_sel_wr));
    Out_V_data_V_1_load_B <= (Out_V_data_V_1_sel_wr and Out_V_data_V_1_state_cmp_full);
    Out_V_data_V_1_sel <= Out_V_data_V_1_sel_rd;
    Out_V_data_V_1_state_cmp_full <= '0' when (Out_V_data_V_1_state = ap_const_lv2_1) else '1';

    Out_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_state1, Out_V_data_V_1_ack_in, tmp_nbreadreq_fu_38_p7, ap_condition_346)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and not(((ap_condition_346 = ap_const_boolean_1) or (not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and (ap_const_logic_0 = Out_V_data_V_1_ack_in)))))) then 
            Out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            Out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Out_V_data_V_1_vld_out <= Out_V_data_V_1_state(0);
    Out_V_id_V_1_ack_in <= Out_V_id_V_1_state(1);
    Out_V_id_V_1_ack_out <= sbu2mlx_TREADY;

    Out_V_id_V_1_data_out_assign_proc : process(Out_V_id_V_1_payload_A, Out_V_id_V_1_payload_B, Out_V_id_V_1_sel)
    begin
        if ((ap_const_logic_1 = Out_V_id_V_1_sel)) then 
            Out_V_id_V_1_data_out <= Out_V_id_V_1_payload_B;
        else 
            Out_V_id_V_1_data_out <= Out_V_id_V_1_payload_A;
        end if; 
    end process;

    Out_V_id_V_1_load_A <= (Out_V_id_V_1_state_cmp_full and not(Out_V_id_V_1_sel_wr));
    Out_V_id_V_1_load_B <= (Out_V_id_V_1_sel_wr and Out_V_id_V_1_state_cmp_full);
    Out_V_id_V_1_sel <= Out_V_id_V_1_sel_rd;
    Out_V_id_V_1_state_cmp_full <= '0' when (Out_V_id_V_1_state = ap_const_lv2_1) else '1';

    Out_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_state1, Out_V_data_V_1_ack_in, tmp_nbreadreq_fu_38_p7, ap_condition_346)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and not(((ap_condition_346 = ap_const_boolean_1) or (not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and (ap_const_logic_0 = Out_V_data_V_1_ack_in)))))) then 
            Out_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            Out_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Out_V_id_V_1_vld_out <= Out_V_id_V_1_state(0);
    Out_V_keep_V_1_ack_in <= Out_V_keep_V_1_state(1);
    Out_V_keep_V_1_ack_out <= sbu2mlx_TREADY;

    Out_V_keep_V_1_data_out_assign_proc : process(Out_V_keep_V_1_payload_A, Out_V_keep_V_1_payload_B, Out_V_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = Out_V_keep_V_1_sel)) then 
            Out_V_keep_V_1_data_out <= Out_V_keep_V_1_payload_B;
        else 
            Out_V_keep_V_1_data_out <= Out_V_keep_V_1_payload_A;
        end if; 
    end process;

    Out_V_keep_V_1_load_A <= (Out_V_keep_V_1_state_cmp_full and not(Out_V_keep_V_1_sel_wr));
    Out_V_keep_V_1_load_B <= (Out_V_keep_V_1_sel_wr and Out_V_keep_V_1_state_cmp_full);
    Out_V_keep_V_1_sel <= Out_V_keep_V_1_sel_rd;
    Out_V_keep_V_1_state_cmp_full <= '0' when (Out_V_keep_V_1_state = ap_const_lv2_1) else '1';

    Out_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_state1, Out_V_data_V_1_ack_in, tmp_nbreadreq_fu_38_p7, ap_condition_346)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and not(((ap_condition_346 = ap_const_boolean_1) or (not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and (ap_const_logic_0 = Out_V_data_V_1_ack_in)))))) then 
            Out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            Out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Out_V_keep_V_1_vld_out <= Out_V_keep_V_1_state(0);
    Out_V_last_V_1_ack_in <= Out_V_last_V_1_state(1);
    Out_V_last_V_1_ack_out <= sbu2mlx_TREADY;

    Out_V_last_V_1_data_out_assign_proc : process(Out_V_last_V_1_payload_A, Out_V_last_V_1_payload_B, Out_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = Out_V_last_V_1_sel)) then 
            Out_V_last_V_1_data_out <= Out_V_last_V_1_payload_B;
        else 
            Out_V_last_V_1_data_out <= Out_V_last_V_1_payload_A;
        end if; 
    end process;

    Out_V_last_V_1_load_A <= (Out_V_last_V_1_state_cmp_full and not(Out_V_last_V_1_sel_wr));
    Out_V_last_V_1_load_B <= (Out_V_last_V_1_sel_wr and Out_V_last_V_1_state_cmp_full);
    Out_V_last_V_1_sel <= Out_V_last_V_1_sel_rd;
    Out_V_last_V_1_state_cmp_full <= '0' when (Out_V_last_V_1_state = ap_const_lv2_1) else '1';

    Out_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_state1, Out_V_data_V_1_ack_in, tmp_nbreadreq_fu_38_p7, ap_condition_346)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and not(((ap_condition_346 = ap_const_boolean_1) or (not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and (ap_const_logic_0 = Out_V_data_V_1_ack_in)))))) then 
            Out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            Out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Out_V_last_V_1_vld_out <= Out_V_last_V_1_state(0);
    Out_V_user_V_1_ack_in <= Out_V_user_V_1_state(1);
    Out_V_user_V_1_ack_out <= sbu2mlx_TREADY;

    Out_V_user_V_1_data_out_assign_proc : process(Out_V_user_V_1_payload_A, Out_V_user_V_1_payload_B, Out_V_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = Out_V_user_V_1_sel)) then 
            Out_V_user_V_1_data_out <= Out_V_user_V_1_payload_B;
        else 
            Out_V_user_V_1_data_out <= Out_V_user_V_1_payload_A;
        end if; 
    end process;

    Out_V_user_V_1_load_A <= (Out_V_user_V_1_state_cmp_full and not(Out_V_user_V_1_sel_wr));
    Out_V_user_V_1_load_B <= (Out_V_user_V_1_sel_wr and Out_V_user_V_1_state_cmp_full);
    Out_V_user_V_1_sel <= Out_V_user_V_1_sel_rd;
    Out_V_user_V_1_state_cmp_full <= '0' when (Out_V_user_V_1_state = ap_const_lv2_1) else '1';

    Out_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_state1, Out_V_data_V_1_ack_in, tmp_nbreadreq_fu_38_p7, ap_condition_346)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and not(((ap_condition_346 = ap_const_boolean_1) or (not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and (ap_const_logic_0 = Out_V_data_V_1_ack_in)))))) then 
            Out_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            Out_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Out_V_user_V_1_vld_out <= Out_V_user_V_1_state(0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);

    ap_condition_346_assign_proc : process(ap_start, mlx2sbu_TVALID, tmp_nbreadreq_fu_38_p7)
    begin
                ap_condition_346 <= ((ap_start = ap_const_logic_0) or (not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and (mlx2sbu_TVALID = ap_const_logic_0)));
    end process;


    ap_condition_391_assign_proc : process(Out_V_data_V_1_ack_in, Out_V_keep_V_1_ack_in, Out_V_last_V_1_ack_in, Out_V_id_V_1_ack_in, Out_V_user_V_1_ack_in)
    begin
                ap_condition_391 <= ((Out_V_data_V_1_ack_in = ap_const_logic_0) or (Out_V_keep_V_1_ack_in = ap_const_logic_0) or (Out_V_last_V_1_ack_in = ap_const_logic_0) or (Out_V_id_V_1_ack_in = ap_const_logic_0) or (Out_V_user_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, Out_V_data_V_1_ack_in, ap_CS_fsm_state2, tmp_reg_112, ap_condition_391)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((ap_condition_391 = ap_const_boolean_1) or (not((ap_const_lv1_0 = tmp_reg_112)) and (ap_const_logic_0 = Out_V_data_V_1_ack_in))))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(Out_V_data_V_1_ack_in, ap_CS_fsm_state2, tmp_reg_112, ap_condition_391)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((ap_condition_391 = ap_const_boolean_1) or (not((ap_const_lv1_0 = tmp_reg_112)) and (ap_const_logic_0 = Out_V_data_V_1_ack_in)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    mlx2sbu_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, mlx2sbu_TVALID, tmp_nbreadreq_fu_38_p7)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)))) then 
            mlx2sbu_TDATA_blk_n <= mlx2sbu_TVALID;
        else 
            mlx2sbu_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mlx2sbu_TREADY_assign_proc : process(ap_CS_fsm_state1, Out_V_data_V_1_ack_in, tmp_nbreadreq_fu_38_p7, ap_condition_346)
    begin
        if ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and not(((ap_condition_346 = ap_const_boolean_1) or (not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7)) and (ap_const_logic_0 = Out_V_data_V_1_ack_in))))))) then 
            mlx2sbu_TREADY <= ap_const_logic_1;
        else 
            mlx2sbu_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    sbu2mlx_TDATA <= Out_V_data_V_1_data_out;

    sbu2mlx_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, Out_V_data_V_1_state, tmp_nbreadreq_fu_38_p7, ap_CS_fsm_state2, tmp_reg_112)
    begin
        if ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_38_p7))) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_reg_112))))) then 
            sbu2mlx_TDATA_blk_n <= Out_V_data_V_1_state(1);
        else 
            sbu2mlx_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sbu2mlx_TID <= Out_V_id_V_1_data_out;
    sbu2mlx_TKEEP <= Out_V_keep_V_1_data_out;
    sbu2mlx_TLAST <= Out_V_last_V_1_data_out;
    sbu2mlx_TUSER <= Out_V_user_V_1_data_out;
    sbu2mlx_TVALID <= Out_V_user_V_1_state(0);
    tmp_nbreadreq_fu_38_p7 <= (0=>(mlx2sbu_TVALID), others=>'-');
end behav;
