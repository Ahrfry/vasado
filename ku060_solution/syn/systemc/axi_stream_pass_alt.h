// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _axi_stream_pass_alt_HH_
#define _axi_stream_pass_alt_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct axi_stream_pass_alt : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<256> > mlx2sbu_TDATA;
    sc_in< sc_logic > mlx2sbu_TVALID;
    sc_out< sc_logic > mlx2sbu_TREADY;
    sc_in< sc_lv<32> > mlx2sbu_TKEEP;
    sc_in< sc_lv<1> > mlx2sbu_TLAST;
    sc_in< sc_lv<3> > mlx2sbu_TID;
    sc_in< sc_lv<12> > mlx2sbu_TUSER;
    sc_out< sc_lv<256> > sbu2mlx_TDATA;
    sc_out< sc_logic > sbu2mlx_TVALID;
    sc_in< sc_logic > sbu2mlx_TREADY;
    sc_out< sc_lv<32> > sbu2mlx_TKEEP;
    sc_out< sc_lv<1> > sbu2mlx_TLAST;
    sc_out< sc_lv<3> > sbu2mlx_TID;
    sc_out< sc_lv<12> > sbu2mlx_TUSER;


    // Module declarations
    axi_stream_pass_alt(sc_module_name name);
    SC_HAS_PROCESS(axi_stream_pass_alt);

    ~axi_stream_pass_alt();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_lv<256> > Out_V_data_V_1_data_out;
    sc_signal< sc_logic > Out_V_data_V_1_vld_in;
    sc_signal< sc_logic > Out_V_data_V_1_vld_out;
    sc_signal< sc_logic > Out_V_data_V_1_ack_in;
    sc_signal< sc_logic > Out_V_data_V_1_ack_out;
    sc_signal< sc_lv<256> > Out_V_data_V_1_payload_A;
    sc_signal< sc_lv<256> > Out_V_data_V_1_payload_B;
    sc_signal< sc_logic > Out_V_data_V_1_sel_rd;
    sc_signal< sc_logic > Out_V_data_V_1_sel_wr;
    sc_signal< sc_logic > Out_V_data_V_1_sel;
    sc_signal< sc_logic > Out_V_data_V_1_load_A;
    sc_signal< sc_logic > Out_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > Out_V_data_V_1_state;
    sc_signal< sc_logic > Out_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<32> > Out_V_keep_V_1_data_out;
    sc_signal< sc_logic > Out_V_keep_V_1_vld_in;
    sc_signal< sc_logic > Out_V_keep_V_1_vld_out;
    sc_signal< sc_logic > Out_V_keep_V_1_ack_in;
    sc_signal< sc_logic > Out_V_keep_V_1_ack_out;
    sc_signal< sc_lv<32> > Out_V_keep_V_1_payload_A;
    sc_signal< sc_lv<32> > Out_V_keep_V_1_payload_B;
    sc_signal< sc_logic > Out_V_keep_V_1_sel_rd;
    sc_signal< sc_logic > Out_V_keep_V_1_sel_wr;
    sc_signal< sc_logic > Out_V_keep_V_1_sel;
    sc_signal< sc_logic > Out_V_keep_V_1_load_A;
    sc_signal< sc_logic > Out_V_keep_V_1_load_B;
    sc_signal< sc_lv<2> > Out_V_keep_V_1_state;
    sc_signal< sc_logic > Out_V_keep_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > Out_V_last_V_1_data_out;
    sc_signal< sc_logic > Out_V_last_V_1_vld_in;
    sc_signal< sc_logic > Out_V_last_V_1_vld_out;
    sc_signal< sc_logic > Out_V_last_V_1_ack_in;
    sc_signal< sc_logic > Out_V_last_V_1_ack_out;
    sc_signal< sc_lv<1> > Out_V_last_V_1_payload_A;
    sc_signal< sc_lv<1> > Out_V_last_V_1_payload_B;
    sc_signal< sc_logic > Out_V_last_V_1_sel_rd;
    sc_signal< sc_logic > Out_V_last_V_1_sel_wr;
    sc_signal< sc_logic > Out_V_last_V_1_sel;
    sc_signal< sc_logic > Out_V_last_V_1_load_A;
    sc_signal< sc_logic > Out_V_last_V_1_load_B;
    sc_signal< sc_lv<2> > Out_V_last_V_1_state;
    sc_signal< sc_logic > Out_V_last_V_1_state_cmp_full;
    sc_signal< sc_lv<3> > Out_V_id_V_1_data_out;
    sc_signal< sc_logic > Out_V_id_V_1_vld_in;
    sc_signal< sc_logic > Out_V_id_V_1_vld_out;
    sc_signal< sc_logic > Out_V_id_V_1_ack_in;
    sc_signal< sc_logic > Out_V_id_V_1_ack_out;
    sc_signal< sc_lv<3> > Out_V_id_V_1_payload_A;
    sc_signal< sc_lv<3> > Out_V_id_V_1_payload_B;
    sc_signal< sc_logic > Out_V_id_V_1_sel_rd;
    sc_signal< sc_logic > Out_V_id_V_1_sel_wr;
    sc_signal< sc_logic > Out_V_id_V_1_sel;
    sc_signal< sc_logic > Out_V_id_V_1_load_A;
    sc_signal< sc_logic > Out_V_id_V_1_load_B;
    sc_signal< sc_lv<2> > Out_V_id_V_1_state;
    sc_signal< sc_logic > Out_V_id_V_1_state_cmp_full;
    sc_signal< sc_lv<12> > Out_V_user_V_1_data_out;
    sc_signal< sc_logic > Out_V_user_V_1_vld_in;
    sc_signal< sc_logic > Out_V_user_V_1_vld_out;
    sc_signal< sc_logic > Out_V_user_V_1_ack_in;
    sc_signal< sc_logic > Out_V_user_V_1_ack_out;
    sc_signal< sc_lv<12> > Out_V_user_V_1_payload_A;
    sc_signal< sc_lv<12> > Out_V_user_V_1_payload_B;
    sc_signal< sc_logic > Out_V_user_V_1_sel_rd;
    sc_signal< sc_logic > Out_V_user_V_1_sel_wr;
    sc_signal< sc_logic > Out_V_user_V_1_sel;
    sc_signal< sc_logic > Out_V_user_V_1_load_A;
    sc_signal< sc_logic > Out_V_user_V_1_load_B;
    sc_signal< sc_lv<2> > Out_V_user_V_1_state;
    sc_signal< sc_logic > Out_V_user_V_1_state_cmp_full;
    sc_signal< sc_logic > mlx2sbu_TDATA_blk_n;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_38_p7;
    sc_signal< sc_logic > sbu2mlx_TDATA_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_reg_112;
    sc_signal< bool > ap_condition_346;
    sc_signal< bool > ap_condition_391;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Out_V_data_V_1_ack_in();
    void thread_Out_V_data_V_1_ack_out();
    void thread_Out_V_data_V_1_data_out();
    void thread_Out_V_data_V_1_load_A();
    void thread_Out_V_data_V_1_load_B();
    void thread_Out_V_data_V_1_sel();
    void thread_Out_V_data_V_1_state_cmp_full();
    void thread_Out_V_data_V_1_vld_in();
    void thread_Out_V_data_V_1_vld_out();
    void thread_Out_V_id_V_1_ack_in();
    void thread_Out_V_id_V_1_ack_out();
    void thread_Out_V_id_V_1_data_out();
    void thread_Out_V_id_V_1_load_A();
    void thread_Out_V_id_V_1_load_B();
    void thread_Out_V_id_V_1_sel();
    void thread_Out_V_id_V_1_state_cmp_full();
    void thread_Out_V_id_V_1_vld_in();
    void thread_Out_V_id_V_1_vld_out();
    void thread_Out_V_keep_V_1_ack_in();
    void thread_Out_V_keep_V_1_ack_out();
    void thread_Out_V_keep_V_1_data_out();
    void thread_Out_V_keep_V_1_load_A();
    void thread_Out_V_keep_V_1_load_B();
    void thread_Out_V_keep_V_1_sel();
    void thread_Out_V_keep_V_1_state_cmp_full();
    void thread_Out_V_keep_V_1_vld_in();
    void thread_Out_V_keep_V_1_vld_out();
    void thread_Out_V_last_V_1_ack_in();
    void thread_Out_V_last_V_1_ack_out();
    void thread_Out_V_last_V_1_data_out();
    void thread_Out_V_last_V_1_load_A();
    void thread_Out_V_last_V_1_load_B();
    void thread_Out_V_last_V_1_sel();
    void thread_Out_V_last_V_1_state_cmp_full();
    void thread_Out_V_last_V_1_vld_in();
    void thread_Out_V_last_V_1_vld_out();
    void thread_Out_V_user_V_1_ack_in();
    void thread_Out_V_user_V_1_ack_out();
    void thread_Out_V_user_V_1_data_out();
    void thread_Out_V_user_V_1_load_A();
    void thread_Out_V_user_V_1_load_B();
    void thread_Out_V_user_V_1_sel();
    void thread_Out_V_user_V_1_state_cmp_full();
    void thread_Out_V_user_V_1_vld_in();
    void thread_Out_V_user_V_1_vld_out();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_condition_346();
    void thread_ap_condition_391();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_mlx2sbu_TDATA_blk_n();
    void thread_mlx2sbu_TREADY();
    void thread_sbu2mlx_TDATA();
    void thread_sbu2mlx_TDATA_blk_n();
    void thread_sbu2mlx_TID();
    void thread_sbu2mlx_TKEEP();
    void thread_sbu2mlx_TLAST();
    void thread_sbu2mlx_TUSER();
    void thread_sbu2mlx_TVALID();
    void thread_tmp_nbreadreq_fu_38_p7();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
