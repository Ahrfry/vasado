// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->
    typedef struct stream256Word {
        ap_uint<256> data;
        ap_uint<32> keep;
        ap_uint<1> last;
        ap_uint<3> id;
        ap_uint<12> user;
       } stream256Word;



// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "prt_nw2sbu_V_data_V"
#define AUTOTB_TVIN_prt_nw2sbu_V_data_V  "../tv/cdatafile/c.example.autotvin_prt_nw2sbu_V_data_V.dat"
#define WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_data_V  "../tv/stream_size/stream_size_in_prt_nw2sbu_V_data_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_data_V  "../tv/stream_size/stream_ingress_status_prt_nw2sbu_V_data_V.dat"
// wrapc file define: "prt_nw2sbu_V_keep_V"
#define AUTOTB_TVIN_prt_nw2sbu_V_keep_V  "../tv/cdatafile/c.example.autotvin_prt_nw2sbu_V_keep_V.dat"
#define WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_keep_V  "../tv/stream_size/stream_size_in_prt_nw2sbu_V_keep_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_keep_V  "../tv/stream_size/stream_ingress_status_prt_nw2sbu_V_keep_V.dat"
// wrapc file define: "prt_nw2sbu_V_last_V"
#define AUTOTB_TVIN_prt_nw2sbu_V_last_V  "../tv/cdatafile/c.example.autotvin_prt_nw2sbu_V_last_V.dat"
#define WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_last_V  "../tv/stream_size/stream_size_in_prt_nw2sbu_V_last_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_last_V  "../tv/stream_size/stream_ingress_status_prt_nw2sbu_V_last_V.dat"
// wrapc file define: "prt_nw2sbu_V_id_V"
#define AUTOTB_TVIN_prt_nw2sbu_V_id_V  "../tv/cdatafile/c.example.autotvin_prt_nw2sbu_V_id_V.dat"
#define WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_id_V  "../tv/stream_size/stream_size_in_prt_nw2sbu_V_id_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_id_V  "../tv/stream_size/stream_ingress_status_prt_nw2sbu_V_id_V.dat"
// wrapc file define: "prt_nw2sbu_V_user_V"
#define AUTOTB_TVIN_prt_nw2sbu_V_user_V  "../tv/cdatafile/c.example.autotvin_prt_nw2sbu_V_user_V.dat"
#define WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_user_V  "../tv/stream_size/stream_size_in_prt_nw2sbu_V_user_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_user_V  "../tv/stream_size/stream_ingress_status_prt_nw2sbu_V_user_V.dat"
// wrapc file define: "prt_cx2sbu_V_data_V"
#define AUTOTB_TVIN_prt_cx2sbu_V_data_V  "../tv/cdatafile/c.example.autotvin_prt_cx2sbu_V_data_V.dat"
#define WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_data_V  "../tv/stream_size/stream_size_in_prt_cx2sbu_V_data_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_data_V  "../tv/stream_size/stream_ingress_status_prt_cx2sbu_V_data_V.dat"
// wrapc file define: "prt_cx2sbu_V_keep_V"
#define AUTOTB_TVIN_prt_cx2sbu_V_keep_V  "../tv/cdatafile/c.example.autotvin_prt_cx2sbu_V_keep_V.dat"
#define WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_keep_V  "../tv/stream_size/stream_size_in_prt_cx2sbu_V_keep_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_keep_V  "../tv/stream_size/stream_ingress_status_prt_cx2sbu_V_keep_V.dat"
// wrapc file define: "prt_cx2sbu_V_last_V"
#define AUTOTB_TVIN_prt_cx2sbu_V_last_V  "../tv/cdatafile/c.example.autotvin_prt_cx2sbu_V_last_V.dat"
#define WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_last_V  "../tv/stream_size/stream_size_in_prt_cx2sbu_V_last_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_last_V  "../tv/stream_size/stream_ingress_status_prt_cx2sbu_V_last_V.dat"
// wrapc file define: "prt_cx2sbu_V_id_V"
#define AUTOTB_TVIN_prt_cx2sbu_V_id_V  "../tv/cdatafile/c.example.autotvin_prt_cx2sbu_V_id_V.dat"
#define WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_id_V  "../tv/stream_size/stream_size_in_prt_cx2sbu_V_id_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_id_V  "../tv/stream_size/stream_ingress_status_prt_cx2sbu_V_id_V.dat"
// wrapc file define: "prt_cx2sbu_V_user_V"
#define AUTOTB_TVIN_prt_cx2sbu_V_user_V  "../tv/cdatafile/c.example.autotvin_prt_cx2sbu_V_user_V.dat"
#define WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_user_V  "../tv/stream_size/stream_size_in_prt_cx2sbu_V_user_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_user_V  "../tv/stream_size/stream_ingress_status_prt_cx2sbu_V_user_V.dat"
// wrapc file define: "mlx2sbu_V_data_V"
#define AUTOTB_TVIN_mlx2sbu_V_data_V  "../tv/cdatafile/c.example.autotvin_mlx2sbu_V_data_V.dat"
#define WRAPC_STREAM_SIZE_IN_mlx2sbu_V_data_V  "../tv/stream_size/stream_size_in_mlx2sbu_V_data_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_data_V  "../tv/stream_size/stream_ingress_status_mlx2sbu_V_data_V.dat"
// wrapc file define: "mlx2sbu_V_keep_V"
#define AUTOTB_TVIN_mlx2sbu_V_keep_V  "../tv/cdatafile/c.example.autotvin_mlx2sbu_V_keep_V.dat"
#define WRAPC_STREAM_SIZE_IN_mlx2sbu_V_keep_V  "../tv/stream_size/stream_size_in_mlx2sbu_V_keep_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_keep_V  "../tv/stream_size/stream_ingress_status_mlx2sbu_V_keep_V.dat"
// wrapc file define: "mlx2sbu_V_last_V"
#define AUTOTB_TVIN_mlx2sbu_V_last_V  "../tv/cdatafile/c.example.autotvin_mlx2sbu_V_last_V.dat"
#define WRAPC_STREAM_SIZE_IN_mlx2sbu_V_last_V  "../tv/stream_size/stream_size_in_mlx2sbu_V_last_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_last_V  "../tv/stream_size/stream_ingress_status_mlx2sbu_V_last_V.dat"
// wrapc file define: "mlx2sbu_V_id_V"
#define AUTOTB_TVIN_mlx2sbu_V_id_V  "../tv/cdatafile/c.example.autotvin_mlx2sbu_V_id_V.dat"
#define WRAPC_STREAM_SIZE_IN_mlx2sbu_V_id_V  "../tv/stream_size/stream_size_in_mlx2sbu_V_id_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_id_V  "../tv/stream_size/stream_ingress_status_mlx2sbu_V_id_V.dat"
// wrapc file define: "mlx2sbu_V_user_V"
#define AUTOTB_TVIN_mlx2sbu_V_user_V  "../tv/cdatafile/c.example.autotvin_mlx2sbu_V_user_V.dat"
#define WRAPC_STREAM_SIZE_IN_mlx2sbu_V_user_V  "../tv/stream_size/stream_size_in_mlx2sbu_V_user_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_user_V  "../tv/stream_size/stream_ingress_status_mlx2sbu_V_user_V.dat"
// wrapc file define: "sbu2prt_cx_V_data_V"
#define AUTOTB_TVOUT_sbu2prt_cx_V_data_V  "../tv/cdatafile/c.example.autotvout_sbu2prt_cx_V_data_V.dat"
#define AUTOTB_TVIN_sbu2prt_cx_V_data_V  "../tv/cdatafile/c.example.autotvin_sbu2prt_cx_V_data_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_data_V  "../tv/stream_size/stream_size_out_sbu2prt_cx_V_data_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2prt_cx_V_data_V  "../tv/stream_size/stream_egress_status_sbu2prt_cx_V_data_V.dat"
// wrapc file define: "sbu2prt_cx_V_keep_V"
#define AUTOTB_TVOUT_sbu2prt_cx_V_keep_V  "../tv/cdatafile/c.example.autotvout_sbu2prt_cx_V_keep_V.dat"
#define AUTOTB_TVIN_sbu2prt_cx_V_keep_V  "../tv/cdatafile/c.example.autotvin_sbu2prt_cx_V_keep_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_keep_V  "../tv/stream_size/stream_size_out_sbu2prt_cx_V_keep_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2prt_cx_V_keep_V  "../tv/stream_size/stream_egress_status_sbu2prt_cx_V_keep_V.dat"
// wrapc file define: "sbu2prt_cx_V_last_V"
#define AUTOTB_TVOUT_sbu2prt_cx_V_last_V  "../tv/cdatafile/c.example.autotvout_sbu2prt_cx_V_last_V.dat"
#define AUTOTB_TVIN_sbu2prt_cx_V_last_V  "../tv/cdatafile/c.example.autotvin_sbu2prt_cx_V_last_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_last_V  "../tv/stream_size/stream_size_out_sbu2prt_cx_V_last_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2prt_cx_V_last_V  "../tv/stream_size/stream_egress_status_sbu2prt_cx_V_last_V.dat"
// wrapc file define: "sbu2prt_cx_V_id_V"
#define AUTOTB_TVOUT_sbu2prt_cx_V_id_V  "../tv/cdatafile/c.example.autotvout_sbu2prt_cx_V_id_V.dat"
#define AUTOTB_TVIN_sbu2prt_cx_V_id_V  "../tv/cdatafile/c.example.autotvin_sbu2prt_cx_V_id_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_id_V  "../tv/stream_size/stream_size_out_sbu2prt_cx_V_id_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2prt_cx_V_id_V  "../tv/stream_size/stream_egress_status_sbu2prt_cx_V_id_V.dat"
// wrapc file define: "sbu2prt_cx_V_user_V"
#define AUTOTB_TVOUT_sbu2prt_cx_V_user_V  "../tv/cdatafile/c.example.autotvout_sbu2prt_cx_V_user_V.dat"
#define AUTOTB_TVIN_sbu2prt_cx_V_user_V  "../tv/cdatafile/c.example.autotvin_sbu2prt_cx_V_user_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_user_V  "../tv/stream_size/stream_size_out_sbu2prt_cx_V_user_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2prt_cx_V_user_V  "../tv/stream_size/stream_egress_status_sbu2prt_cx_V_user_V.dat"
// wrapc file define: "sbu2prt_nw_V_data_V"
#define AUTOTB_TVOUT_sbu2prt_nw_V_data_V  "../tv/cdatafile/c.example.autotvout_sbu2prt_nw_V_data_V.dat"
#define AUTOTB_TVIN_sbu2prt_nw_V_data_V  "../tv/cdatafile/c.example.autotvin_sbu2prt_nw_V_data_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_data_V  "../tv/stream_size/stream_size_out_sbu2prt_nw_V_data_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2prt_nw_V_data_V  "../tv/stream_size/stream_egress_status_sbu2prt_nw_V_data_V.dat"
// wrapc file define: "sbu2prt_nw_V_keep_V"
#define AUTOTB_TVOUT_sbu2prt_nw_V_keep_V  "../tv/cdatafile/c.example.autotvout_sbu2prt_nw_V_keep_V.dat"
#define AUTOTB_TVIN_sbu2prt_nw_V_keep_V  "../tv/cdatafile/c.example.autotvin_sbu2prt_nw_V_keep_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_keep_V  "../tv/stream_size/stream_size_out_sbu2prt_nw_V_keep_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2prt_nw_V_keep_V  "../tv/stream_size/stream_egress_status_sbu2prt_nw_V_keep_V.dat"
// wrapc file define: "sbu2prt_nw_V_last_V"
#define AUTOTB_TVOUT_sbu2prt_nw_V_last_V  "../tv/cdatafile/c.example.autotvout_sbu2prt_nw_V_last_V.dat"
#define AUTOTB_TVIN_sbu2prt_nw_V_last_V  "../tv/cdatafile/c.example.autotvin_sbu2prt_nw_V_last_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_last_V  "../tv/stream_size/stream_size_out_sbu2prt_nw_V_last_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2prt_nw_V_last_V  "../tv/stream_size/stream_egress_status_sbu2prt_nw_V_last_V.dat"
// wrapc file define: "sbu2prt_nw_V_id_V"
#define AUTOTB_TVOUT_sbu2prt_nw_V_id_V  "../tv/cdatafile/c.example.autotvout_sbu2prt_nw_V_id_V.dat"
#define AUTOTB_TVIN_sbu2prt_nw_V_id_V  "../tv/cdatafile/c.example.autotvin_sbu2prt_nw_V_id_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_id_V  "../tv/stream_size/stream_size_out_sbu2prt_nw_V_id_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2prt_nw_V_id_V  "../tv/stream_size/stream_egress_status_sbu2prt_nw_V_id_V.dat"
// wrapc file define: "sbu2prt_nw_V_user_V"
#define AUTOTB_TVOUT_sbu2prt_nw_V_user_V  "../tv/cdatafile/c.example.autotvout_sbu2prt_nw_V_user_V.dat"
#define AUTOTB_TVIN_sbu2prt_nw_V_user_V  "../tv/cdatafile/c.example.autotvin_sbu2prt_nw_V_user_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_user_V  "../tv/stream_size/stream_size_out_sbu2prt_nw_V_user_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2prt_nw_V_user_V  "../tv/stream_size/stream_egress_status_sbu2prt_nw_V_user_V.dat"
// wrapc file define: "sbu2mlx_V_data_V"
#define AUTOTB_TVOUT_sbu2mlx_V_data_V  "../tv/cdatafile/c.example.autotvout_sbu2mlx_V_data_V.dat"
#define AUTOTB_TVIN_sbu2mlx_V_data_V  "../tv/cdatafile/c.example.autotvin_sbu2mlx_V_data_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_data_V  "../tv/stream_size/stream_size_out_sbu2mlx_V_data_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2mlx_V_data_V  "../tv/stream_size/stream_egress_status_sbu2mlx_V_data_V.dat"
// wrapc file define: "sbu2mlx_V_keep_V"
#define AUTOTB_TVOUT_sbu2mlx_V_keep_V  "../tv/cdatafile/c.example.autotvout_sbu2mlx_V_keep_V.dat"
#define AUTOTB_TVIN_sbu2mlx_V_keep_V  "../tv/cdatafile/c.example.autotvin_sbu2mlx_V_keep_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_keep_V  "../tv/stream_size/stream_size_out_sbu2mlx_V_keep_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2mlx_V_keep_V  "../tv/stream_size/stream_egress_status_sbu2mlx_V_keep_V.dat"
// wrapc file define: "sbu2mlx_V_last_V"
#define AUTOTB_TVOUT_sbu2mlx_V_last_V  "../tv/cdatafile/c.example.autotvout_sbu2mlx_V_last_V.dat"
#define AUTOTB_TVIN_sbu2mlx_V_last_V  "../tv/cdatafile/c.example.autotvin_sbu2mlx_V_last_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_last_V  "../tv/stream_size/stream_size_out_sbu2mlx_V_last_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2mlx_V_last_V  "../tv/stream_size/stream_egress_status_sbu2mlx_V_last_V.dat"
// wrapc file define: "sbu2mlx_V_id_V"
#define AUTOTB_TVOUT_sbu2mlx_V_id_V  "../tv/cdatafile/c.example.autotvout_sbu2mlx_V_id_V.dat"
#define AUTOTB_TVIN_sbu2mlx_V_id_V  "../tv/cdatafile/c.example.autotvin_sbu2mlx_V_id_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_id_V  "../tv/stream_size/stream_size_out_sbu2mlx_V_id_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2mlx_V_id_V  "../tv/stream_size/stream_egress_status_sbu2mlx_V_id_V.dat"
// wrapc file define: "sbu2mlx_V_user_V"
#define AUTOTB_TVOUT_sbu2mlx_V_user_V  "../tv/cdatafile/c.example.autotvout_sbu2mlx_V_user_V.dat"
#define AUTOTB_TVIN_sbu2mlx_V_user_V  "../tv/cdatafile/c.example.autotvin_sbu2mlx_V_user_V.dat"
#define WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_user_V  "../tv/stream_size/stream_size_out_sbu2mlx_V_user_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_sbu2mlx_V_user_V  "../tv/stream_size/stream_egress_status_sbu2mlx_V_user_V.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "sbu2prt_cx_V_data_V"
#define AUTOTB_TVOUT_PC_sbu2prt_cx_V_data_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2prt_cx_V_data_V.dat"
// tvout file define: "sbu2prt_cx_V_keep_V"
#define AUTOTB_TVOUT_PC_sbu2prt_cx_V_keep_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2prt_cx_V_keep_V.dat"
// tvout file define: "sbu2prt_cx_V_last_V"
#define AUTOTB_TVOUT_PC_sbu2prt_cx_V_last_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2prt_cx_V_last_V.dat"
// tvout file define: "sbu2prt_cx_V_id_V"
#define AUTOTB_TVOUT_PC_sbu2prt_cx_V_id_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2prt_cx_V_id_V.dat"
// tvout file define: "sbu2prt_cx_V_user_V"
#define AUTOTB_TVOUT_PC_sbu2prt_cx_V_user_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2prt_cx_V_user_V.dat"
// tvout file define: "sbu2prt_nw_V_data_V"
#define AUTOTB_TVOUT_PC_sbu2prt_nw_V_data_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2prt_nw_V_data_V.dat"
// tvout file define: "sbu2prt_nw_V_keep_V"
#define AUTOTB_TVOUT_PC_sbu2prt_nw_V_keep_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2prt_nw_V_keep_V.dat"
// tvout file define: "sbu2prt_nw_V_last_V"
#define AUTOTB_TVOUT_PC_sbu2prt_nw_V_last_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2prt_nw_V_last_V.dat"
// tvout file define: "sbu2prt_nw_V_id_V"
#define AUTOTB_TVOUT_PC_sbu2prt_nw_V_id_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2prt_nw_V_id_V.dat"
// tvout file define: "sbu2prt_nw_V_user_V"
#define AUTOTB_TVOUT_PC_sbu2prt_nw_V_user_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2prt_nw_V_user_V.dat"
// tvout file define: "sbu2mlx_V_data_V"
#define AUTOTB_TVOUT_PC_sbu2mlx_V_data_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2mlx_V_data_V.dat"
// tvout file define: "sbu2mlx_V_keep_V"
#define AUTOTB_TVOUT_PC_sbu2mlx_V_keep_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2mlx_V_keep_V.dat"
// tvout file define: "sbu2mlx_V_last_V"
#define AUTOTB_TVOUT_PC_sbu2mlx_V_last_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2mlx_V_last_V.dat"
// tvout file define: "sbu2mlx_V_id_V"
#define AUTOTB_TVOUT_PC_sbu2mlx_V_id_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2mlx_V_id_V.dat"
// tvout file define: "sbu2mlx_V_user_V"
#define AUTOTB_TVOUT_PC_sbu2mlx_V_user_V  "../tv/rtldatafile/rtl.example.autotvout_sbu2mlx_V_user_V.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			prt_nw2sbu_V_data_V_depth = 0;
			prt_nw2sbu_V_keep_V_depth = 0;
			prt_nw2sbu_V_last_V_depth = 0;
			prt_nw2sbu_V_id_V_depth = 0;
			prt_nw2sbu_V_user_V_depth = 0;
			prt_cx2sbu_V_data_V_depth = 0;
			prt_cx2sbu_V_keep_V_depth = 0;
			prt_cx2sbu_V_last_V_depth = 0;
			prt_cx2sbu_V_id_V_depth = 0;
			prt_cx2sbu_V_user_V_depth = 0;
			mlx2sbu_V_data_V_depth = 0;
			mlx2sbu_V_keep_V_depth = 0;
			mlx2sbu_V_last_V_depth = 0;
			mlx2sbu_V_id_V_depth = 0;
			mlx2sbu_V_user_V_depth = 0;
			sbu2prt_cx_V_data_V_depth = 0;
			sbu2prt_cx_V_keep_V_depth = 0;
			sbu2prt_cx_V_last_V_depth = 0;
			sbu2prt_cx_V_id_V_depth = 0;
			sbu2prt_cx_V_user_V_depth = 0;
			sbu2prt_nw_V_data_V_depth = 0;
			sbu2prt_nw_V_keep_V_depth = 0;
			sbu2prt_nw_V_last_V_depth = 0;
			sbu2prt_nw_V_id_V_depth = 0;
			sbu2prt_nw_V_user_V_depth = 0;
			sbu2mlx_V_data_V_depth = 0;
			sbu2mlx_V_keep_V_depth = 0;
			sbu2mlx_V_last_V_depth = 0;
			sbu2mlx_V_id_V_depth = 0;
			sbu2mlx_V_user_V_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{prt_nw2sbu_V_data_V " << prt_nw2sbu_V_data_V_depth << "}\n";
			total_list << "{prt_nw2sbu_V_keep_V " << prt_nw2sbu_V_keep_V_depth << "}\n";
			total_list << "{prt_nw2sbu_V_last_V " << prt_nw2sbu_V_last_V_depth << "}\n";
			total_list << "{prt_nw2sbu_V_id_V " << prt_nw2sbu_V_id_V_depth << "}\n";
			total_list << "{prt_nw2sbu_V_user_V " << prt_nw2sbu_V_user_V_depth << "}\n";
			total_list << "{prt_cx2sbu_V_data_V " << prt_cx2sbu_V_data_V_depth << "}\n";
			total_list << "{prt_cx2sbu_V_keep_V " << prt_cx2sbu_V_keep_V_depth << "}\n";
			total_list << "{prt_cx2sbu_V_last_V " << prt_cx2sbu_V_last_V_depth << "}\n";
			total_list << "{prt_cx2sbu_V_id_V " << prt_cx2sbu_V_id_V_depth << "}\n";
			total_list << "{prt_cx2sbu_V_user_V " << prt_cx2sbu_V_user_V_depth << "}\n";
			total_list << "{mlx2sbu_V_data_V " << mlx2sbu_V_data_V_depth << "}\n";
			total_list << "{mlx2sbu_V_keep_V " << mlx2sbu_V_keep_V_depth << "}\n";
			total_list << "{mlx2sbu_V_last_V " << mlx2sbu_V_last_V_depth << "}\n";
			total_list << "{mlx2sbu_V_id_V " << mlx2sbu_V_id_V_depth << "}\n";
			total_list << "{mlx2sbu_V_user_V " << mlx2sbu_V_user_V_depth << "}\n";
			total_list << "{sbu2prt_cx_V_data_V " << sbu2prt_cx_V_data_V_depth << "}\n";
			total_list << "{sbu2prt_cx_V_keep_V " << sbu2prt_cx_V_keep_V_depth << "}\n";
			total_list << "{sbu2prt_cx_V_last_V " << sbu2prt_cx_V_last_V_depth << "}\n";
			total_list << "{sbu2prt_cx_V_id_V " << sbu2prt_cx_V_id_V_depth << "}\n";
			total_list << "{sbu2prt_cx_V_user_V " << sbu2prt_cx_V_user_V_depth << "}\n";
			total_list << "{sbu2prt_nw_V_data_V " << sbu2prt_nw_V_data_V_depth << "}\n";
			total_list << "{sbu2prt_nw_V_keep_V " << sbu2prt_nw_V_keep_V_depth << "}\n";
			total_list << "{sbu2prt_nw_V_last_V " << sbu2prt_nw_V_last_V_depth << "}\n";
			total_list << "{sbu2prt_nw_V_id_V " << sbu2prt_nw_V_id_V_depth << "}\n";
			total_list << "{sbu2prt_nw_V_user_V " << sbu2prt_nw_V_user_V_depth << "}\n";
			total_list << "{sbu2mlx_V_data_V " << sbu2mlx_V_data_V_depth << "}\n";
			total_list << "{sbu2mlx_V_keep_V " << sbu2mlx_V_keep_V_depth << "}\n";
			total_list << "{sbu2mlx_V_last_V " << sbu2mlx_V_last_V_depth << "}\n";
			total_list << "{sbu2mlx_V_id_V " << sbu2mlx_V_id_V_depth << "}\n";
			total_list << "{sbu2mlx_V_user_V " << sbu2mlx_V_user_V_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int prt_nw2sbu_V_data_V_depth;
		int prt_nw2sbu_V_keep_V_depth;
		int prt_nw2sbu_V_last_V_depth;
		int prt_nw2sbu_V_id_V_depth;
		int prt_nw2sbu_V_user_V_depth;
		int prt_cx2sbu_V_data_V_depth;
		int prt_cx2sbu_V_keep_V_depth;
		int prt_cx2sbu_V_last_V_depth;
		int prt_cx2sbu_V_id_V_depth;
		int prt_cx2sbu_V_user_V_depth;
		int mlx2sbu_V_data_V_depth;
		int mlx2sbu_V_keep_V_depth;
		int mlx2sbu_V_last_V_depth;
		int mlx2sbu_V_id_V_depth;
		int mlx2sbu_V_user_V_depth;
		int sbu2prt_cx_V_data_V_depth;
		int sbu2prt_cx_V_keep_V_depth;
		int sbu2prt_cx_V_last_V_depth;
		int sbu2prt_cx_V_id_V_depth;
		int sbu2prt_cx_V_user_V_depth;
		int sbu2prt_nw_V_data_V_depth;
		int sbu2prt_nw_V_keep_V_depth;
		int sbu2prt_nw_V_last_V_depth;
		int sbu2prt_nw_V_id_V_depth;
		int sbu2prt_nw_V_user_V_depth;
		int sbu2mlx_V_data_V_depth;
		int sbu2mlx_V_keep_V_depth;
		int sbu2mlx_V_last_V_depth;
		int sbu2mlx_V_id_V_depth;
		int sbu2mlx_V_user_V_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void example (
hls::stream<stream256Word >& prt_nw2sbu,
hls::stream<stream256Word >& prt_cx2sbu,
hls::stream<stream256Word >& mlx2sbu,
hls::stream<stream256Word >& sbu2prt_cx,
hls::stream<stream256Word >& sbu2prt_nw,
hls::stream<stream256Word >& sbu2mlx);

void AESL_WRAP_example (
hls::stream<stream256Word >& prt_nw2sbu,
hls::stream<stream256Word >& prt_cx2sbu,
hls::stream<stream256Word >& mlx2sbu,
hls::stream<stream256Word >& sbu2prt_cx,
hls::stream<stream256Word >& sbu2prt_nw,
hls::stream<stream256Word >& sbu2mlx)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;

		// pop stream input: "prt_nw2sbu"
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_data_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_data_V, AESL_token); // pop_size
			int aesl_tmp_1 = atoi(AESL_token.c_str());
			for (int i = 0; i < aesl_tmp_1; i++)
			{
				prt_nw2sbu.read();
			}
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_data_V, AESL_token); // [[/transaction]]
		}

		// pop stream input: "prt_cx2sbu"
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_data_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_data_V, AESL_token); // pop_size
			int aesl_tmp_4 = atoi(AESL_token.c_str());
			for (int i = 0; i < aesl_tmp_4; i++)
			{
				prt_cx2sbu.read();
			}
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_data_V, AESL_token); // [[/transaction]]
		}

		// pop stream input: "mlx2sbu"
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_data_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_data_V, AESL_token); // pop_size
			int aesl_tmp_7 = atoi(AESL_token.c_str());
			for (int i = 0; i < aesl_tmp_7; i++)
			{
				mlx2sbu.read();
			}
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_data_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "sbu2prt_cx"
		std::vector<stream256Word > aesl_tmp_9;
		int aesl_tmp_10;
		int aesl_tmp_11 = 0;

		// read output stream size: "sbu2prt_cx"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_data_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_data_V, AESL_token); // pop_size
			aesl_tmp_10 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_data_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "sbu2prt_nw"
		std::vector<stream256Word > aesl_tmp_12;
		int aesl_tmp_13;
		int aesl_tmp_14 = 0;

		// read output stream size: "sbu2prt_nw"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_data_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_data_V, AESL_token); // pop_size
			aesl_tmp_13 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_data_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "sbu2mlx"
		std::vector<stream256Word > aesl_tmp_15;
		int aesl_tmp_16;
		int aesl_tmp_17 = 0;

		// read output stream size: "sbu2mlx"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_data_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_data_V, AESL_token); // pop_size
			aesl_tmp_16 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_data_V, AESL_token); // [[/transaction]]
		}

		// output port post check: "sbu2prt_cx_V_data_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_data_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_data_V, AESL_token); // data

			std::vector<sc_bv<256> > sbu2prt_cx_V_data_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_cx_V_data_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_cx_V_data_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2prt_cx_V_data_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_data_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2prt_cx_V_data_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_10)
			{
				aesl_tmp_10 = i;
			}

			if (aesl_tmp_10 > 0 && aesl_tmp_9.size() < aesl_tmp_10)
			{
				int aesl_tmp_9_size = aesl_tmp_9.size();

				for (int tmp_aesl_tmp_9 = 0; tmp_aesl_tmp_9 < aesl_tmp_10 - aesl_tmp_9_size; tmp_aesl_tmp_9++)
				{
					stream256Word tmp;
					aesl_tmp_9.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2prt_cx_V_data_V
				{
					// bitslice(255, 0)
					// {
						// celement: sbu2prt_cx.V.data.V(255, 0)
						// {
							sc_lv<256>* sbu2prt_cx_V_data_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<256>[aesl_tmp_10 - aesl_tmp_11];
						// }
					// }

					// bitslice(255, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_cx.V.data.V(255, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_9[0].data) != NULL) // check the null address if the c port is array or others
									{
										sbu2prt_cx_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(255, 0) = sc_bv<256>(sbu2prt_cx_V_data_V_pc_buffer[hls_map_index].range(255, 0));
									}
								}
							}
						}
					}

					// bitslice(255, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_cx.V.data.V(255, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_9[i_0].data
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_9[0].data
									// output_left_conversion : aesl_tmp_9[i_0].data
									// output_type_conversion : (sbu2prt_cx_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_9[0].data) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_9[i_0].data = (sbu2prt_cx_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2prt_cx_V_keep_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_keep_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_keep_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_keep_V, AESL_token); // data

			std::vector<sc_bv<32> > sbu2prt_cx_V_keep_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_cx_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_cx_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2prt_cx_V_keep_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_keep_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2prt_cx_V_keep_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_10)
			{
				aesl_tmp_10 = i;
			}

			if (aesl_tmp_10 > 0 && aesl_tmp_9.size() < aesl_tmp_10)
			{
				int aesl_tmp_9_size = aesl_tmp_9.size();

				for (int tmp_aesl_tmp_9 = 0; tmp_aesl_tmp_9 < aesl_tmp_10 - aesl_tmp_9_size; tmp_aesl_tmp_9++)
				{
					stream256Word tmp;
					aesl_tmp_9.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2prt_cx_V_keep_V
				{
					// bitslice(31, 0)
					// {
						// celement: sbu2prt_cx.V.keep.V(31, 0)
						// {
							sc_lv<32>* sbu2prt_cx_V_keep_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<32>[aesl_tmp_10 - aesl_tmp_11];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_cx.V.keep.V(31, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_9[0].keep) != NULL) // check the null address if the c port is array or others
									{
										sbu2prt_cx_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(31, 0) = sc_bv<32>(sbu2prt_cx_V_keep_V_pc_buffer[hls_map_index].range(31, 0));
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_cx.V.keep.V(31, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_9[i_0].keep
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_9[0].keep
									// output_left_conversion : aesl_tmp_9[i_0].keep
									// output_type_conversion : (sbu2prt_cx_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_9[0].keep) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_9[i_0].keep = (sbu2prt_cx_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2prt_cx_V_last_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_last_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_last_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_last_V, AESL_token); // data

			std::vector<sc_bv<1> > sbu2prt_cx_V_last_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_cx_V_last_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_cx_V_last_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2prt_cx_V_last_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_last_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2prt_cx_V_last_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_10)
			{
				aesl_tmp_10 = i;
			}

			if (aesl_tmp_10 > 0 && aesl_tmp_9.size() < aesl_tmp_10)
			{
				int aesl_tmp_9_size = aesl_tmp_9.size();

				for (int tmp_aesl_tmp_9 = 0; tmp_aesl_tmp_9 < aesl_tmp_10 - aesl_tmp_9_size; tmp_aesl_tmp_9++)
				{
					stream256Word tmp;
					aesl_tmp_9.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2prt_cx_V_last_V
				{
					// bitslice(0, 0)
					// {
						// celement: sbu2prt_cx.V.last.V(0, 0)
						// {
							sc_lv<1>* sbu2prt_cx_V_last_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<1>[aesl_tmp_10 - aesl_tmp_11];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_cx.V.last.V(0, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_9[0].last) != NULL) // check the null address if the c port is array or others
									{
										sbu2prt_cx_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(sbu2prt_cx_V_last_V_pc_buffer[hls_map_index].range(0, 0));
									}
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_cx.V.last.V(0, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_9[i_0].last
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_9[0].last
									// output_left_conversion : aesl_tmp_9[i_0].last
									// output_type_conversion : (sbu2prt_cx_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_9[0].last) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_9[i_0].last = (sbu2prt_cx_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2prt_cx_V_id_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_id_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_id_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_id_V, AESL_token); // data

			std::vector<sc_bv<3> > sbu2prt_cx_V_id_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_cx_V_id_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_cx_V_id_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2prt_cx_V_id_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_id_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2prt_cx_V_id_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_10)
			{
				aesl_tmp_10 = i;
			}

			if (aesl_tmp_10 > 0 && aesl_tmp_9.size() < aesl_tmp_10)
			{
				int aesl_tmp_9_size = aesl_tmp_9.size();

				for (int tmp_aesl_tmp_9 = 0; tmp_aesl_tmp_9 < aesl_tmp_10 - aesl_tmp_9_size; tmp_aesl_tmp_9++)
				{
					stream256Word tmp;
					aesl_tmp_9.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2prt_cx_V_id_V
				{
					// bitslice(2, 0)
					// {
						// celement: sbu2prt_cx.V.id.V(2, 0)
						// {
							sc_lv<3>* sbu2prt_cx_V_id_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<3>[aesl_tmp_10 - aesl_tmp_11];
						// }
					// }

					// bitslice(2, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_cx.V.id.V(2, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_9[0].id) != NULL) // check the null address if the c port is array or others
									{
										sbu2prt_cx_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(2, 0) = sc_bv<3>(sbu2prt_cx_V_id_V_pc_buffer[hls_map_index].range(2, 0));
									}
								}
							}
						}
					}

					// bitslice(2, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_cx.V.id.V(2, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_9[i_0].id
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_9[0].id
									// output_left_conversion : aesl_tmp_9[i_0].id
									// output_type_conversion : (sbu2prt_cx_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_9[0].id) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_9[i_0].id = (sbu2prt_cx_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2prt_cx_V_user_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_user_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_user_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_user_V, AESL_token); // data

			std::vector<sc_bv<12> > sbu2prt_cx_V_user_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_cx_V_user_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_cx_V_user_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2prt_cx_V_user_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_cx_V_user_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2prt_cx_V_user_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_10)
			{
				aesl_tmp_10 = i;
			}

			if (aesl_tmp_10 > 0 && aesl_tmp_9.size() < aesl_tmp_10)
			{
				int aesl_tmp_9_size = aesl_tmp_9.size();

				for (int tmp_aesl_tmp_9 = 0; tmp_aesl_tmp_9 < aesl_tmp_10 - aesl_tmp_9_size; tmp_aesl_tmp_9++)
				{
					stream256Word tmp;
					aesl_tmp_9.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2prt_cx_V_user_V
				{
					// bitslice(11, 0)
					// {
						// celement: sbu2prt_cx.V.user.V(11, 0)
						// {
							sc_lv<12>* sbu2prt_cx_V_user_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<12>[aesl_tmp_10 - aesl_tmp_11];
						// }
					// }

					// bitslice(11, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_cx.V.user.V(11, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_9[0].user) != NULL) // check the null address if the c port is array or others
									{
										sbu2prt_cx_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(11, 0) = sc_bv<12>(sbu2prt_cx_V_user_V_pc_buffer[hls_map_index].range(11, 0));
									}
								}
							}
						}
					}

					// bitslice(11, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_cx.V.user.V(11, 0)
						{
							// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
							for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_9[i_0].user
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_9[0].user
									// output_left_conversion : aesl_tmp_9[i_0].user
									// output_type_conversion : (sbu2prt_cx_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_9[0].user) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_9[i_0].user = (sbu2prt_cx_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2prt_nw_V_data_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_data_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_data_V, AESL_token); // data

			std::vector<sc_bv<256> > sbu2prt_nw_V_data_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_nw_V_data_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_nw_V_data_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2prt_nw_V_data_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_data_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2prt_nw_V_data_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_13)
			{
				aesl_tmp_13 = i;
			}

			if (aesl_tmp_13 > 0 && aesl_tmp_12.size() < aesl_tmp_13)
			{
				int aesl_tmp_12_size = aesl_tmp_12.size();

				for (int tmp_aesl_tmp_12 = 0; tmp_aesl_tmp_12 < aesl_tmp_13 - aesl_tmp_12_size; tmp_aesl_tmp_12++)
				{
					stream256Word tmp;
					aesl_tmp_12.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2prt_nw_V_data_V
				{
					// bitslice(255, 0)
					// {
						// celement: sbu2prt_nw.V.data.V(255, 0)
						// {
							sc_lv<256>* sbu2prt_nw_V_data_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<256>[aesl_tmp_13 - aesl_tmp_14];
						// }
					// }

					// bitslice(255, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_nw.V.data.V(255, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_12[0].data) != NULL) // check the null address if the c port is array or others
									{
										sbu2prt_nw_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(255, 0) = sc_bv<256>(sbu2prt_nw_V_data_V_pc_buffer[hls_map_index].range(255, 0));
									}
								}
							}
						}
					}

					// bitslice(255, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_nw.V.data.V(255, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_12[i_0].data
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_12[0].data
									// output_left_conversion : aesl_tmp_12[i_0].data
									// output_type_conversion : (sbu2prt_nw_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_12[0].data) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_12[i_0].data = (sbu2prt_nw_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2prt_nw_V_keep_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_keep_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_keep_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_keep_V, AESL_token); // data

			std::vector<sc_bv<32> > sbu2prt_nw_V_keep_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_nw_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_nw_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2prt_nw_V_keep_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_keep_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2prt_nw_V_keep_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_13)
			{
				aesl_tmp_13 = i;
			}

			if (aesl_tmp_13 > 0 && aesl_tmp_12.size() < aesl_tmp_13)
			{
				int aesl_tmp_12_size = aesl_tmp_12.size();

				for (int tmp_aesl_tmp_12 = 0; tmp_aesl_tmp_12 < aesl_tmp_13 - aesl_tmp_12_size; tmp_aesl_tmp_12++)
				{
					stream256Word tmp;
					aesl_tmp_12.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2prt_nw_V_keep_V
				{
					// bitslice(31, 0)
					// {
						// celement: sbu2prt_nw.V.keep.V(31, 0)
						// {
							sc_lv<32>* sbu2prt_nw_V_keep_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<32>[aesl_tmp_13 - aesl_tmp_14];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_nw.V.keep.V(31, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_12[0].keep) != NULL) // check the null address if the c port is array or others
									{
										sbu2prt_nw_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(31, 0) = sc_bv<32>(sbu2prt_nw_V_keep_V_pc_buffer[hls_map_index].range(31, 0));
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_nw.V.keep.V(31, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_12[i_0].keep
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_12[0].keep
									// output_left_conversion : aesl_tmp_12[i_0].keep
									// output_type_conversion : (sbu2prt_nw_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_12[0].keep) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_12[i_0].keep = (sbu2prt_nw_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2prt_nw_V_last_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_last_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_last_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_last_V, AESL_token); // data

			std::vector<sc_bv<1> > sbu2prt_nw_V_last_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_nw_V_last_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_nw_V_last_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2prt_nw_V_last_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_last_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2prt_nw_V_last_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_13)
			{
				aesl_tmp_13 = i;
			}

			if (aesl_tmp_13 > 0 && aesl_tmp_12.size() < aesl_tmp_13)
			{
				int aesl_tmp_12_size = aesl_tmp_12.size();

				for (int tmp_aesl_tmp_12 = 0; tmp_aesl_tmp_12 < aesl_tmp_13 - aesl_tmp_12_size; tmp_aesl_tmp_12++)
				{
					stream256Word tmp;
					aesl_tmp_12.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2prt_nw_V_last_V
				{
					// bitslice(0, 0)
					// {
						// celement: sbu2prt_nw.V.last.V(0, 0)
						// {
							sc_lv<1>* sbu2prt_nw_V_last_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<1>[aesl_tmp_13 - aesl_tmp_14];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_nw.V.last.V(0, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_12[0].last) != NULL) // check the null address if the c port is array or others
									{
										sbu2prt_nw_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(sbu2prt_nw_V_last_V_pc_buffer[hls_map_index].range(0, 0));
									}
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_nw.V.last.V(0, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_12[i_0].last
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_12[0].last
									// output_left_conversion : aesl_tmp_12[i_0].last
									// output_type_conversion : (sbu2prt_nw_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_12[0].last) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_12[i_0].last = (sbu2prt_nw_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2prt_nw_V_id_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_id_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_id_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_id_V, AESL_token); // data

			std::vector<sc_bv<3> > sbu2prt_nw_V_id_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_nw_V_id_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_nw_V_id_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2prt_nw_V_id_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_id_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2prt_nw_V_id_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_13)
			{
				aesl_tmp_13 = i;
			}

			if (aesl_tmp_13 > 0 && aesl_tmp_12.size() < aesl_tmp_13)
			{
				int aesl_tmp_12_size = aesl_tmp_12.size();

				for (int tmp_aesl_tmp_12 = 0; tmp_aesl_tmp_12 < aesl_tmp_13 - aesl_tmp_12_size; tmp_aesl_tmp_12++)
				{
					stream256Word tmp;
					aesl_tmp_12.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2prt_nw_V_id_V
				{
					// bitslice(2, 0)
					// {
						// celement: sbu2prt_nw.V.id.V(2, 0)
						// {
							sc_lv<3>* sbu2prt_nw_V_id_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<3>[aesl_tmp_13 - aesl_tmp_14];
						// }
					// }

					// bitslice(2, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_nw.V.id.V(2, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_12[0].id) != NULL) // check the null address if the c port is array or others
									{
										sbu2prt_nw_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(2, 0) = sc_bv<3>(sbu2prt_nw_V_id_V_pc_buffer[hls_map_index].range(2, 0));
									}
								}
							}
						}
					}

					// bitslice(2, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_nw.V.id.V(2, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_12[i_0].id
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_12[0].id
									// output_left_conversion : aesl_tmp_12[i_0].id
									// output_type_conversion : (sbu2prt_nw_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_12[0].id) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_12[i_0].id = (sbu2prt_nw_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2prt_nw_V_user_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_user_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_user_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_user_V, AESL_token); // data

			std::vector<sc_bv<12> > sbu2prt_nw_V_user_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_nw_V_user_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2prt_nw_V_user_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2prt_nw_V_user_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2prt_nw_V_user_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2prt_nw_V_user_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_13)
			{
				aesl_tmp_13 = i;
			}

			if (aesl_tmp_13 > 0 && aesl_tmp_12.size() < aesl_tmp_13)
			{
				int aesl_tmp_12_size = aesl_tmp_12.size();

				for (int tmp_aesl_tmp_12 = 0; tmp_aesl_tmp_12 < aesl_tmp_13 - aesl_tmp_12_size; tmp_aesl_tmp_12++)
				{
					stream256Word tmp;
					aesl_tmp_12.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2prt_nw_V_user_V
				{
					// bitslice(11, 0)
					// {
						// celement: sbu2prt_nw.V.user.V(11, 0)
						// {
							sc_lv<12>* sbu2prt_nw_V_user_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<12>[aesl_tmp_13 - aesl_tmp_14];
						// }
					// }

					// bitslice(11, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_nw.V.user.V(11, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_12[0].user) != NULL) // check the null address if the c port is array or others
									{
										sbu2prt_nw_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(11, 0) = sc_bv<12>(sbu2prt_nw_V_user_V_pc_buffer[hls_map_index].range(11, 0));
									}
								}
							}
						}
					}

					// bitslice(11, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2prt_nw.V.user.V(11, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_12[i_0].user
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_12[0].user
									// output_left_conversion : aesl_tmp_12[i_0].user
									// output_type_conversion : (sbu2prt_nw_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_12[0].user) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_12[i_0].user = (sbu2prt_nw_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2mlx_V_data_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_data_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_data_V, AESL_token); // data

			std::vector<sc_bv<256> > sbu2mlx_V_data_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2mlx_V_data_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2mlx_V_data_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2mlx_V_data_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_data_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2mlx_V_data_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_16)
			{
				aesl_tmp_16 = i;
			}

			if (aesl_tmp_16 > 0 && aesl_tmp_15.size() < aesl_tmp_16)
			{
				int aesl_tmp_15_size = aesl_tmp_15.size();

				for (int tmp_aesl_tmp_15 = 0; tmp_aesl_tmp_15 < aesl_tmp_16 - aesl_tmp_15_size; tmp_aesl_tmp_15++)
				{
					stream256Word tmp;
					aesl_tmp_15.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2mlx_V_data_V
				{
					// bitslice(255, 0)
					// {
						// celement: sbu2mlx.V.data.V(255, 0)
						// {
							sc_lv<256>* sbu2mlx_V_data_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<256>[aesl_tmp_16 - aesl_tmp_17];
						// }
					// }

					// bitslice(255, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2mlx.V.data.V(255, 0)
						{
							// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
							for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_15[0].data) != NULL) // check the null address if the c port is array or others
									{
										sbu2mlx_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(255, 0) = sc_bv<256>(sbu2mlx_V_data_V_pc_buffer[hls_map_index].range(255, 0));
									}
								}
							}
						}
					}

					// bitslice(255, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2mlx.V.data.V(255, 0)
						{
							// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
							for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_15[i_0].data
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_15[0].data
									// output_left_conversion : aesl_tmp_15[i_0].data
									// output_type_conversion : (sbu2mlx_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_15[0].data) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_15[i_0].data = (sbu2mlx_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2mlx_V_keep_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_keep_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_keep_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_keep_V, AESL_token); // data

			std::vector<sc_bv<32> > sbu2mlx_V_keep_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2mlx_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2mlx_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2mlx_V_keep_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_keep_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2mlx_V_keep_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_16)
			{
				aesl_tmp_16 = i;
			}

			if (aesl_tmp_16 > 0 && aesl_tmp_15.size() < aesl_tmp_16)
			{
				int aesl_tmp_15_size = aesl_tmp_15.size();

				for (int tmp_aesl_tmp_15 = 0; tmp_aesl_tmp_15 < aesl_tmp_16 - aesl_tmp_15_size; tmp_aesl_tmp_15++)
				{
					stream256Word tmp;
					aesl_tmp_15.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2mlx_V_keep_V
				{
					// bitslice(31, 0)
					// {
						// celement: sbu2mlx.V.keep.V(31, 0)
						// {
							sc_lv<32>* sbu2mlx_V_keep_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<32>[aesl_tmp_16 - aesl_tmp_17];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2mlx.V.keep.V(31, 0)
						{
							// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
							for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_15[0].keep) != NULL) // check the null address if the c port is array or others
									{
										sbu2mlx_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(31, 0) = sc_bv<32>(sbu2mlx_V_keep_V_pc_buffer[hls_map_index].range(31, 0));
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2mlx.V.keep.V(31, 0)
						{
							// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
							for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_15[i_0].keep
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_15[0].keep
									// output_left_conversion : aesl_tmp_15[i_0].keep
									// output_type_conversion : (sbu2mlx_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_15[0].keep) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_15[i_0].keep = (sbu2mlx_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2mlx_V_last_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_last_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_last_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_last_V, AESL_token); // data

			std::vector<sc_bv<1> > sbu2mlx_V_last_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2mlx_V_last_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2mlx_V_last_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2mlx_V_last_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_last_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2mlx_V_last_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_16)
			{
				aesl_tmp_16 = i;
			}

			if (aesl_tmp_16 > 0 && aesl_tmp_15.size() < aesl_tmp_16)
			{
				int aesl_tmp_15_size = aesl_tmp_15.size();

				for (int tmp_aesl_tmp_15 = 0; tmp_aesl_tmp_15 < aesl_tmp_16 - aesl_tmp_15_size; tmp_aesl_tmp_15++)
				{
					stream256Word tmp;
					aesl_tmp_15.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2mlx_V_last_V
				{
					// bitslice(0, 0)
					// {
						// celement: sbu2mlx.V.last.V(0, 0)
						// {
							sc_lv<1>* sbu2mlx_V_last_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<1>[aesl_tmp_16 - aesl_tmp_17];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2mlx.V.last.V(0, 0)
						{
							// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
							for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_15[0].last) != NULL) // check the null address if the c port is array or others
									{
										sbu2mlx_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(sbu2mlx_V_last_V_pc_buffer[hls_map_index].range(0, 0));
									}
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2mlx.V.last.V(0, 0)
						{
							// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
							for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_15[i_0].last
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_15[0].last
									// output_left_conversion : aesl_tmp_15[i_0].last
									// output_type_conversion : (sbu2mlx_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_15[0].last) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_15[i_0].last = (sbu2mlx_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2mlx_V_id_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_id_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_id_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_id_V, AESL_token); // data

			std::vector<sc_bv<3> > sbu2mlx_V_id_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2mlx_V_id_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2mlx_V_id_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2mlx_V_id_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_id_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2mlx_V_id_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_16)
			{
				aesl_tmp_16 = i;
			}

			if (aesl_tmp_16 > 0 && aesl_tmp_15.size() < aesl_tmp_16)
			{
				int aesl_tmp_15_size = aesl_tmp_15.size();

				for (int tmp_aesl_tmp_15 = 0; tmp_aesl_tmp_15 < aesl_tmp_16 - aesl_tmp_15_size; tmp_aesl_tmp_15++)
				{
					stream256Word tmp;
					aesl_tmp_15.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2mlx_V_id_V
				{
					// bitslice(2, 0)
					// {
						// celement: sbu2mlx.V.id.V(2, 0)
						// {
							sc_lv<3>* sbu2mlx_V_id_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<3>[aesl_tmp_16 - aesl_tmp_17];
						// }
					// }

					// bitslice(2, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2mlx.V.id.V(2, 0)
						{
							// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
							for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_15[0].id) != NULL) // check the null address if the c port is array or others
									{
										sbu2mlx_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(2, 0) = sc_bv<3>(sbu2mlx_V_id_V_pc_buffer[hls_map_index].range(2, 0));
									}
								}
							}
						}
					}

					// bitslice(2, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2mlx.V.id.V(2, 0)
						{
							// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
							for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_15[i_0].id
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_15[0].id
									// output_left_conversion : aesl_tmp_15[i_0].id
									// output_type_conversion : (sbu2mlx_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_15[0].id) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_15[i_0].id = (sbu2mlx_V_id_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "sbu2mlx_V_user_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_user_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_user_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_user_V, AESL_token); // data

			std::vector<sc_bv<12> > sbu2mlx_V_user_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2mlx_V_user_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sbu2mlx_V_user_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sbu2mlx_V_user_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sbu2mlx_V_user_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sbu2mlx_V_user_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_16)
			{
				aesl_tmp_16 = i;
			}

			if (aesl_tmp_16 > 0 && aesl_tmp_15.size() < aesl_tmp_16)
			{
				int aesl_tmp_15_size = aesl_tmp_15.size();

				for (int tmp_aesl_tmp_15 = 0; tmp_aesl_tmp_15 < aesl_tmp_16 - aesl_tmp_15_size; tmp_aesl_tmp_15++)
				{
					stream256Word tmp;
					aesl_tmp_15.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sbu2mlx_V_user_V
				{
					// bitslice(11, 0)
					// {
						// celement: sbu2mlx.V.user.V(11, 0)
						// {
							sc_lv<12>* sbu2mlx_V_user_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<12>[aesl_tmp_16 - aesl_tmp_17];
						// }
					// }

					// bitslice(11, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2mlx.V.user.V(11, 0)
						{
							// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
							for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_15[0].user) != NULL) // check the null address if the c port is array or others
									{
										sbu2mlx_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++].range(11, 0) = sc_bv<12>(sbu2mlx_V_user_V_pc_buffer[hls_map_index].range(11, 0));
									}
								}
							}
						}
					}

					// bitslice(11, 0)
					{
						int hls_map_index = 0;
						// celement: sbu2mlx.V.user.V(11, 0)
						{
							// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
							for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_15[i_0].user
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_15[0].user
									// output_left_conversion : aesl_tmp_15[i_0].user
									// output_type_conversion : (sbu2mlx_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_15[0].user) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_15[i_0].user = (sbu2mlx_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
									}
								}
							}
						}
					}
				}
			}
		}

		// push back output stream: "sbu2prt_cx"
		for (int i = 0; i < aesl_tmp_10; i++)
		{
			sbu2prt_cx.write(aesl_tmp_9[i]);
		}

		// push back output stream: "sbu2prt_nw"
		for (int i = 0; i < aesl_tmp_13; i++)
		{
			sbu2prt_nw.write(aesl_tmp_12[i]);
		}

		// push back output stream: "sbu2mlx"
		for (int i = 0; i < aesl_tmp_16; i++)
		{
			sbu2mlx.write(aesl_tmp_15[i]);
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "prt_nw2sbu_V_data_V"
		char* tvin_prt_nw2sbu_V_data_V = new char[69];
		aesl_fh.touch(AUTOTB_TVIN_prt_nw2sbu_V_data_V);
		char* wrapc_stream_size_in_prt_nw2sbu_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_data_V);
		char* wrapc_stream_ingress_status_prt_nw2sbu_V_data_V = new char[69];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_data_V);

		// "prt_nw2sbu_V_keep_V"
		char* tvin_prt_nw2sbu_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_prt_nw2sbu_V_keep_V);
		char* wrapc_stream_size_in_prt_nw2sbu_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_keep_V);
		char* wrapc_stream_ingress_status_prt_nw2sbu_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_keep_V);

		// "prt_nw2sbu_V_last_V"
		char* tvin_prt_nw2sbu_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_prt_nw2sbu_V_last_V);
		char* wrapc_stream_size_in_prt_nw2sbu_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_last_V);
		char* wrapc_stream_ingress_status_prt_nw2sbu_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_last_V);

		// "prt_nw2sbu_V_id_V"
		char* tvin_prt_nw2sbu_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_prt_nw2sbu_V_id_V);
		char* wrapc_stream_size_in_prt_nw2sbu_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_id_V);
		char* wrapc_stream_ingress_status_prt_nw2sbu_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_id_V);

		// "prt_nw2sbu_V_user_V"
		char* tvin_prt_nw2sbu_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_prt_nw2sbu_V_user_V);
		char* wrapc_stream_size_in_prt_nw2sbu_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_user_V);
		char* wrapc_stream_ingress_status_prt_nw2sbu_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_user_V);

		// "prt_cx2sbu_V_data_V"
		char* tvin_prt_cx2sbu_V_data_V = new char[69];
		aesl_fh.touch(AUTOTB_TVIN_prt_cx2sbu_V_data_V);
		char* wrapc_stream_size_in_prt_cx2sbu_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_data_V);
		char* wrapc_stream_ingress_status_prt_cx2sbu_V_data_V = new char[69];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_data_V);

		// "prt_cx2sbu_V_keep_V"
		char* tvin_prt_cx2sbu_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_prt_cx2sbu_V_keep_V);
		char* wrapc_stream_size_in_prt_cx2sbu_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_keep_V);
		char* wrapc_stream_ingress_status_prt_cx2sbu_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_keep_V);

		// "prt_cx2sbu_V_last_V"
		char* tvin_prt_cx2sbu_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_prt_cx2sbu_V_last_V);
		char* wrapc_stream_size_in_prt_cx2sbu_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_last_V);
		char* wrapc_stream_ingress_status_prt_cx2sbu_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_last_V);

		// "prt_cx2sbu_V_id_V"
		char* tvin_prt_cx2sbu_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_prt_cx2sbu_V_id_V);
		char* wrapc_stream_size_in_prt_cx2sbu_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_id_V);
		char* wrapc_stream_ingress_status_prt_cx2sbu_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_id_V);

		// "prt_cx2sbu_V_user_V"
		char* tvin_prt_cx2sbu_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_prt_cx2sbu_V_user_V);
		char* wrapc_stream_size_in_prt_cx2sbu_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_user_V);
		char* wrapc_stream_ingress_status_prt_cx2sbu_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_user_V);

		// "mlx2sbu_V_data_V"
		char* tvin_mlx2sbu_V_data_V = new char[69];
		aesl_fh.touch(AUTOTB_TVIN_mlx2sbu_V_data_V);
		char* wrapc_stream_size_in_mlx2sbu_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_data_V);
		char* wrapc_stream_ingress_status_mlx2sbu_V_data_V = new char[69];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_data_V);

		// "mlx2sbu_V_keep_V"
		char* tvin_mlx2sbu_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_mlx2sbu_V_keep_V);
		char* wrapc_stream_size_in_mlx2sbu_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_keep_V);
		char* wrapc_stream_ingress_status_mlx2sbu_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_keep_V);

		// "mlx2sbu_V_last_V"
		char* tvin_mlx2sbu_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_mlx2sbu_V_last_V);
		char* wrapc_stream_size_in_mlx2sbu_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_last_V);
		char* wrapc_stream_ingress_status_mlx2sbu_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_last_V);

		// "mlx2sbu_V_id_V"
		char* tvin_mlx2sbu_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_mlx2sbu_V_id_V);
		char* wrapc_stream_size_in_mlx2sbu_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_id_V);
		char* wrapc_stream_ingress_status_mlx2sbu_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_id_V);

		// "mlx2sbu_V_user_V"
		char* tvin_mlx2sbu_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_mlx2sbu_V_user_V);
		char* wrapc_stream_size_in_mlx2sbu_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_user_V);
		char* wrapc_stream_ingress_status_mlx2sbu_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_user_V);

		// "sbu2prt_cx_V_data_V"
		char* tvin_sbu2prt_cx_V_data_V = new char[69];
		aesl_fh.touch(AUTOTB_TVIN_sbu2prt_cx_V_data_V);
		char* tvout_sbu2prt_cx_V_data_V = new char[69];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2prt_cx_V_data_V);
		char* wrapc_stream_size_out_sbu2prt_cx_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_data_V);
		char* wrapc_stream_egress_status_sbu2prt_cx_V_data_V = new char[69];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2prt_cx_V_data_V);

		// "sbu2prt_cx_V_keep_V"
		char* tvin_sbu2prt_cx_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sbu2prt_cx_V_keep_V);
		char* tvout_sbu2prt_cx_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2prt_cx_V_keep_V);
		char* wrapc_stream_size_out_sbu2prt_cx_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_keep_V);
		char* wrapc_stream_egress_status_sbu2prt_cx_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2prt_cx_V_keep_V);

		// "sbu2prt_cx_V_last_V"
		char* tvin_sbu2prt_cx_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sbu2prt_cx_V_last_V);
		char* tvout_sbu2prt_cx_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2prt_cx_V_last_V);
		char* wrapc_stream_size_out_sbu2prt_cx_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_last_V);
		char* wrapc_stream_egress_status_sbu2prt_cx_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2prt_cx_V_last_V);

		// "sbu2prt_cx_V_id_V"
		char* tvin_sbu2prt_cx_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sbu2prt_cx_V_id_V);
		char* tvout_sbu2prt_cx_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2prt_cx_V_id_V);
		char* wrapc_stream_size_out_sbu2prt_cx_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_id_V);
		char* wrapc_stream_egress_status_sbu2prt_cx_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2prt_cx_V_id_V);

		// "sbu2prt_cx_V_user_V"
		char* tvin_sbu2prt_cx_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sbu2prt_cx_V_user_V);
		char* tvout_sbu2prt_cx_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2prt_cx_V_user_V);
		char* wrapc_stream_size_out_sbu2prt_cx_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_user_V);
		char* wrapc_stream_egress_status_sbu2prt_cx_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2prt_cx_V_user_V);

		// "sbu2prt_nw_V_data_V"
		char* tvin_sbu2prt_nw_V_data_V = new char[69];
		aesl_fh.touch(AUTOTB_TVIN_sbu2prt_nw_V_data_V);
		char* tvout_sbu2prt_nw_V_data_V = new char[69];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2prt_nw_V_data_V);
		char* wrapc_stream_size_out_sbu2prt_nw_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_data_V);
		char* wrapc_stream_egress_status_sbu2prt_nw_V_data_V = new char[69];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2prt_nw_V_data_V);

		// "sbu2prt_nw_V_keep_V"
		char* tvin_sbu2prt_nw_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sbu2prt_nw_V_keep_V);
		char* tvout_sbu2prt_nw_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2prt_nw_V_keep_V);
		char* wrapc_stream_size_out_sbu2prt_nw_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_keep_V);
		char* wrapc_stream_egress_status_sbu2prt_nw_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2prt_nw_V_keep_V);

		// "sbu2prt_nw_V_last_V"
		char* tvin_sbu2prt_nw_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sbu2prt_nw_V_last_V);
		char* tvout_sbu2prt_nw_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2prt_nw_V_last_V);
		char* wrapc_stream_size_out_sbu2prt_nw_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_last_V);
		char* wrapc_stream_egress_status_sbu2prt_nw_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2prt_nw_V_last_V);

		// "sbu2prt_nw_V_id_V"
		char* tvin_sbu2prt_nw_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sbu2prt_nw_V_id_V);
		char* tvout_sbu2prt_nw_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2prt_nw_V_id_V);
		char* wrapc_stream_size_out_sbu2prt_nw_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_id_V);
		char* wrapc_stream_egress_status_sbu2prt_nw_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2prt_nw_V_id_V);

		// "sbu2prt_nw_V_user_V"
		char* tvin_sbu2prt_nw_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sbu2prt_nw_V_user_V);
		char* tvout_sbu2prt_nw_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2prt_nw_V_user_V);
		char* wrapc_stream_size_out_sbu2prt_nw_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_user_V);
		char* wrapc_stream_egress_status_sbu2prt_nw_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2prt_nw_V_user_V);

		// "sbu2mlx_V_data_V"
		char* tvin_sbu2mlx_V_data_V = new char[69];
		aesl_fh.touch(AUTOTB_TVIN_sbu2mlx_V_data_V);
		char* tvout_sbu2mlx_V_data_V = new char[69];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2mlx_V_data_V);
		char* wrapc_stream_size_out_sbu2mlx_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_data_V);
		char* wrapc_stream_egress_status_sbu2mlx_V_data_V = new char[69];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2mlx_V_data_V);

		// "sbu2mlx_V_keep_V"
		char* tvin_sbu2mlx_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sbu2mlx_V_keep_V);
		char* tvout_sbu2mlx_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2mlx_V_keep_V);
		char* wrapc_stream_size_out_sbu2mlx_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_keep_V);
		char* wrapc_stream_egress_status_sbu2mlx_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2mlx_V_keep_V);

		// "sbu2mlx_V_last_V"
		char* tvin_sbu2mlx_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sbu2mlx_V_last_V);
		char* tvout_sbu2mlx_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2mlx_V_last_V);
		char* wrapc_stream_size_out_sbu2mlx_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_last_V);
		char* wrapc_stream_egress_status_sbu2mlx_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2mlx_V_last_V);

		// "sbu2mlx_V_id_V"
		char* tvin_sbu2mlx_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sbu2mlx_V_id_V);
		char* tvout_sbu2mlx_V_id_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2mlx_V_id_V);
		char* wrapc_stream_size_out_sbu2mlx_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_id_V);
		char* wrapc_stream_egress_status_sbu2mlx_V_id_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2mlx_V_id_V);

		// "sbu2mlx_V_user_V"
		char* tvin_sbu2mlx_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sbu2mlx_V_user_V);
		char* tvout_sbu2mlx_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_sbu2mlx_V_user_V);
		char* wrapc_stream_size_out_sbu2mlx_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_user_V);
		char* wrapc_stream_egress_status_sbu2mlx_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_sbu2mlx_V_user_V);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// dump stream tvin: "prt_nw2sbu"
		std::vector<stream256Word > aesl_tmp_0;
		int aesl_tmp_1 = 0;
		while (!prt_nw2sbu.empty())
		{
			aesl_tmp_0.push_back(prt_nw2sbu.read());
			aesl_tmp_1++;
		}

		// dump stream tvin: "prt_cx2sbu"
		std::vector<stream256Word > aesl_tmp_3;
		int aesl_tmp_4 = 0;
		while (!prt_cx2sbu.empty())
		{
			aesl_tmp_3.push_back(prt_cx2sbu.read());
			aesl_tmp_4++;
		}

		// dump stream tvin: "mlx2sbu"
		std::vector<stream256Word > aesl_tmp_6;
		int aesl_tmp_7 = 0;
		while (!mlx2sbu.empty())
		{
			aesl_tmp_6.push_back(mlx2sbu.read());
			aesl_tmp_7++;
		}

		// dump stream tvin: "sbu2prt_cx"
		std::vector<stream256Word > aesl_tmp_9;
		int aesl_tmp_10 = 0;
		while (!sbu2prt_cx.empty())
		{
			aesl_tmp_9.push_back(sbu2prt_cx.read());
			aesl_tmp_10++;
		}

		// dump stream tvin: "sbu2prt_nw"
		std::vector<stream256Word > aesl_tmp_12;
		int aesl_tmp_13 = 0;
		while (!sbu2prt_nw.empty())
		{
			aesl_tmp_12.push_back(sbu2prt_nw.read());
			aesl_tmp_13++;
		}

		// dump stream tvin: "sbu2mlx"
		std::vector<stream256Word > aesl_tmp_15;
		int aesl_tmp_16 = 0;
		while (!sbu2mlx.empty())
		{
			aesl_tmp_15.push_back(sbu2mlx.read());
			aesl_tmp_16++;
		}

		// push back input stream: "prt_nw2sbu"
		for (int i = 0; i < aesl_tmp_1; i++)
		{
			prt_nw2sbu.write(aesl_tmp_0[i]);
		}

		// push back input stream: "prt_cx2sbu"
		for (int i = 0; i < aesl_tmp_4; i++)
		{
			prt_cx2sbu.write(aesl_tmp_3[i]);
		}

		// push back input stream: "mlx2sbu"
		for (int i = 0; i < aesl_tmp_7; i++)
		{
			mlx2sbu.write(aesl_tmp_6[i]);
		}

		// push back input stream: "sbu2prt_cx"
		for (int i = 0; i < aesl_tmp_10; i++)
		{
			sbu2prt_cx.write(aesl_tmp_9[i]);
		}

		// push back input stream: "sbu2prt_nw"
		for (int i = 0; i < aesl_tmp_13; i++)
		{
			sbu2prt_nw.write(aesl_tmp_12[i]);
		}

		// push back input stream: "sbu2mlx"
		for (int i = 0; i < aesl_tmp_16; i++)
		{
			sbu2mlx.write(aesl_tmp_15[i]);
		}

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		example(prt_nw2sbu, prt_cx2sbu, mlx2sbu, sbu2prt_cx, sbu2prt_nw, sbu2mlx);

		CodeState = DUMP_OUTPUTS;
		// record input size to tv3: "prt_nw2sbu"
		int aesl_tmp_2 = prt_nw2sbu.size();

		// record input size to tv3: "prt_cx2sbu"
		int aesl_tmp_5 = prt_cx2sbu.size();

		// record input size to tv3: "mlx2sbu"
		int aesl_tmp_8 = mlx2sbu.size();

		// pop output stream: "sbu2prt_cx"
		int aesl_tmp_11 = aesl_tmp_10;
		aesl_tmp_10 = 0;
     aesl_tmp_9.clear();
		while (!sbu2prt_cx.empty())
		{
			aesl_tmp_9.push_back(sbu2prt_cx.read());
			aesl_tmp_10++;
		}

		// pop output stream: "sbu2prt_nw"
		int aesl_tmp_14 = aesl_tmp_13;
		aesl_tmp_13 = 0;
     aesl_tmp_12.clear();
		while (!sbu2prt_nw.empty())
		{
			aesl_tmp_12.push_back(sbu2prt_nw.read());
			aesl_tmp_13++;
		}

		// pop output stream: "sbu2mlx"
		int aesl_tmp_17 = aesl_tmp_16;
		aesl_tmp_16 = 0;
     aesl_tmp_15.clear();
		while (!sbu2mlx.empty())
		{
			aesl_tmp_15.push_back(sbu2mlx.read());
			aesl_tmp_16++;
		}

		// [[transaction]]
		sprintf(tvin_prt_nw2sbu_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_data_V, tvin_prt_nw2sbu_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_data_V, tvin_prt_nw2sbu_V_data_V);

		sc_bv<256>* prt_nw2sbu_V_data_V_tvin_wrapc_buffer = new sc_bv<256>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: prt_nw2sbu_V_data_V
		{
			// bitslice(255, 0)
			{
				int hls_map_index = 0;
				// celement: prt_nw2sbu.V.data.V(255, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].data
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].data
							// regulate_c_name       : prt_nw2sbu_V_data_V
							// input_type_conversion : (aesl_tmp_0[i_0].data).to_string(2).c_str()
							if (&(aesl_tmp_0[0].data) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<256> prt_nw2sbu_V_data_V_tmp_mem;
								prt_nw2sbu_V_data_V_tmp_mem = (aesl_tmp_0[i_0].data).to_string(2).c_str();
								prt_nw2sbu_V_data_V_tvin_wrapc_buffer[hls_map_index++].range(255, 0) = prt_nw2sbu_V_data_V_tmp_mem.range(255, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_prt_nw2sbu_V_data_V, "%s\n", (prt_nw2sbu_V_data_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_data_V, tvin_prt_nw2sbu_V_data_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_prt_nw2sbu_V_data_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_data_V, stream_ingress_size_prt_nw2sbu_V_data_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_data_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_prt_nw2sbu_V_data_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_data_V, stream_ingress_size_prt_nw2sbu_V_data_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_data_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.prt_nw2sbu_V_data_V_depth);
		sprintf(tvin_prt_nw2sbu_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_data_V, tvin_prt_nw2sbu_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_data_V, tvin_prt_nw2sbu_V_data_V);

		// release memory allocation
		delete [] prt_nw2sbu_V_data_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_data_V, wrapc_stream_size_in_prt_nw2sbu_V_data_V);
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_data_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_data_V, wrapc_stream_size_in_prt_nw2sbu_V_data_V);
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_data_V, wrapc_stream_size_in_prt_nw2sbu_V_data_V);

		// [[transaction]]
		sprintf(tvin_prt_nw2sbu_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_keep_V, tvin_prt_nw2sbu_V_keep_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_keep_V, tvin_prt_nw2sbu_V_keep_V);

		sc_bv<32>* prt_nw2sbu_V_keep_V_tvin_wrapc_buffer = new sc_bv<32>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: prt_nw2sbu_V_keep_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: prt_nw2sbu.V.keep.V(31, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].keep
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].keep
							// regulate_c_name       : prt_nw2sbu_V_keep_V
							// input_type_conversion : (aesl_tmp_0[i_0].keep).to_string(2).c_str()
							if (&(aesl_tmp_0[0].keep) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> prt_nw2sbu_V_keep_V_tmp_mem;
								prt_nw2sbu_V_keep_V_tmp_mem = (aesl_tmp_0[i_0].keep).to_string(2).c_str();
								prt_nw2sbu_V_keep_V_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = prt_nw2sbu_V_keep_V_tmp_mem.range(31, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_prt_nw2sbu_V_keep_V, "%s\n", (prt_nw2sbu_V_keep_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_keep_V, tvin_prt_nw2sbu_V_keep_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_prt_nw2sbu_V_keep_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_keep_V, stream_ingress_size_prt_nw2sbu_V_keep_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_keep_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_prt_nw2sbu_V_keep_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_keep_V, stream_ingress_size_prt_nw2sbu_V_keep_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_keep_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.prt_nw2sbu_V_keep_V_depth);
		sprintf(tvin_prt_nw2sbu_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_keep_V, tvin_prt_nw2sbu_V_keep_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_keep_V, tvin_prt_nw2sbu_V_keep_V);

		// release memory allocation
		delete [] prt_nw2sbu_V_keep_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_keep_V, wrapc_stream_size_in_prt_nw2sbu_V_keep_V);
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_keep_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_keep_V, wrapc_stream_size_in_prt_nw2sbu_V_keep_V);
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_keep_V, wrapc_stream_size_in_prt_nw2sbu_V_keep_V);

		// [[transaction]]
		sprintf(tvin_prt_nw2sbu_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_last_V, tvin_prt_nw2sbu_V_last_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_last_V, tvin_prt_nw2sbu_V_last_V);

		sc_bv<1>* prt_nw2sbu_V_last_V_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: prt_nw2sbu_V_last_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: prt_nw2sbu.V.last.V(0, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].last
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].last
							// regulate_c_name       : prt_nw2sbu_V_last_V
							// input_type_conversion : (aesl_tmp_0[i_0].last).to_string(2).c_str()
							if (&(aesl_tmp_0[0].last) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<1> prt_nw2sbu_V_last_V_tmp_mem;
								prt_nw2sbu_V_last_V_tmp_mem = (aesl_tmp_0[i_0].last).to_string(2).c_str();
								prt_nw2sbu_V_last_V_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = prt_nw2sbu_V_last_V_tmp_mem.range(0, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_prt_nw2sbu_V_last_V, "%s\n", (prt_nw2sbu_V_last_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_last_V, tvin_prt_nw2sbu_V_last_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_prt_nw2sbu_V_last_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_last_V, stream_ingress_size_prt_nw2sbu_V_last_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_last_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_prt_nw2sbu_V_last_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_last_V, stream_ingress_size_prt_nw2sbu_V_last_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_last_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.prt_nw2sbu_V_last_V_depth);
		sprintf(tvin_prt_nw2sbu_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_last_V, tvin_prt_nw2sbu_V_last_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_last_V, tvin_prt_nw2sbu_V_last_V);

		// release memory allocation
		delete [] prt_nw2sbu_V_last_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_last_V, wrapc_stream_size_in_prt_nw2sbu_V_last_V);
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_last_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_last_V, wrapc_stream_size_in_prt_nw2sbu_V_last_V);
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_last_V, wrapc_stream_size_in_prt_nw2sbu_V_last_V);

		// [[transaction]]
		sprintf(tvin_prt_nw2sbu_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_id_V, tvin_prt_nw2sbu_V_id_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_id_V, tvin_prt_nw2sbu_V_id_V);

		sc_bv<3>* prt_nw2sbu_V_id_V_tvin_wrapc_buffer = new sc_bv<3>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: prt_nw2sbu_V_id_V
		{
			// bitslice(2, 0)
			{
				int hls_map_index = 0;
				// celement: prt_nw2sbu.V.id.V(2, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].id
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].id
							// regulate_c_name       : prt_nw2sbu_V_id_V
							// input_type_conversion : (aesl_tmp_0[i_0].id).to_string(2).c_str()
							if (&(aesl_tmp_0[0].id) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<3> prt_nw2sbu_V_id_V_tmp_mem;
								prt_nw2sbu_V_id_V_tmp_mem = (aesl_tmp_0[i_0].id).to_string(2).c_str();
								prt_nw2sbu_V_id_V_tvin_wrapc_buffer[hls_map_index++].range(2, 0) = prt_nw2sbu_V_id_V_tmp_mem.range(2, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_prt_nw2sbu_V_id_V, "%s\n", (prt_nw2sbu_V_id_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_id_V, tvin_prt_nw2sbu_V_id_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_prt_nw2sbu_V_id_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_id_V, stream_ingress_size_prt_nw2sbu_V_id_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_id_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_prt_nw2sbu_V_id_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_id_V, stream_ingress_size_prt_nw2sbu_V_id_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_id_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.prt_nw2sbu_V_id_V_depth);
		sprintf(tvin_prt_nw2sbu_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_id_V, tvin_prt_nw2sbu_V_id_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_id_V, tvin_prt_nw2sbu_V_id_V);

		// release memory allocation
		delete [] prt_nw2sbu_V_id_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_id_V, wrapc_stream_size_in_prt_nw2sbu_V_id_V);
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_id_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_id_V, wrapc_stream_size_in_prt_nw2sbu_V_id_V);
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_id_V, wrapc_stream_size_in_prt_nw2sbu_V_id_V);

		// [[transaction]]
		sprintf(tvin_prt_nw2sbu_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_user_V, tvin_prt_nw2sbu_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_user_V, tvin_prt_nw2sbu_V_user_V);

		sc_bv<12>* prt_nw2sbu_V_user_V_tvin_wrapc_buffer = new sc_bv<12>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: prt_nw2sbu_V_user_V
		{
			// bitslice(11, 0)
			{
				int hls_map_index = 0;
				// celement: prt_nw2sbu.V.user.V(11, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].user
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].user
							// regulate_c_name       : prt_nw2sbu_V_user_V
							// input_type_conversion : (aesl_tmp_0[i_0].user).to_string(2).c_str()
							if (&(aesl_tmp_0[0].user) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<12> prt_nw2sbu_V_user_V_tmp_mem;
								prt_nw2sbu_V_user_V_tmp_mem = (aesl_tmp_0[i_0].user).to_string(2).c_str();
								prt_nw2sbu_V_user_V_tvin_wrapc_buffer[hls_map_index++].range(11, 0) = prt_nw2sbu_V_user_V_tmp_mem.range(11, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_prt_nw2sbu_V_user_V, "%s\n", (prt_nw2sbu_V_user_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_user_V, tvin_prt_nw2sbu_V_user_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_prt_nw2sbu_V_user_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_user_V, stream_ingress_size_prt_nw2sbu_V_user_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_user_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_prt_nw2sbu_V_user_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_user_V, stream_ingress_size_prt_nw2sbu_V_user_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_user_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.prt_nw2sbu_V_user_V_depth);
		sprintf(tvin_prt_nw2sbu_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_prt_nw2sbu_V_user_V, tvin_prt_nw2sbu_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_nw2sbu_V_user_V, tvin_prt_nw2sbu_V_user_V);

		// release memory allocation
		delete [] prt_nw2sbu_V_user_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_user_V, wrapc_stream_size_in_prt_nw2sbu_V_user_V);
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_user_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_user_V, wrapc_stream_size_in_prt_nw2sbu_V_user_V);
		sprintf(wrapc_stream_size_in_prt_nw2sbu_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_nw2sbu_V_user_V, wrapc_stream_size_in_prt_nw2sbu_V_user_V);

		// [[transaction]]
		sprintf(tvin_prt_cx2sbu_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_data_V, tvin_prt_cx2sbu_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_data_V, tvin_prt_cx2sbu_V_data_V);

		sc_bv<256>* prt_cx2sbu_V_data_V_tvin_wrapc_buffer = new sc_bv<256>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: prt_cx2sbu_V_data_V
		{
			// bitslice(255, 0)
			{
				int hls_map_index = 0;
				// celement: prt_cx2sbu.V.data.V(255, 0)
				{
					// carray: (0) => (aesl_tmp_4 - aesl_tmp_5 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_4 - aesl_tmp_5 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].data
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].data
							// regulate_c_name       : prt_cx2sbu_V_data_V
							// input_type_conversion : (aesl_tmp_3[i_0].data).to_string(2).c_str()
							if (&(aesl_tmp_3[0].data) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<256> prt_cx2sbu_V_data_V_tmp_mem;
								prt_cx2sbu_V_data_V_tmp_mem = (aesl_tmp_3[i_0].data).to_string(2).c_str();
								prt_cx2sbu_V_data_V_tvin_wrapc_buffer[hls_map_index++].range(255, 0) = prt_cx2sbu_V_data_V_tmp_mem.range(255, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvin_prt_cx2sbu_V_data_V, "%s\n", (prt_cx2sbu_V_data_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_data_V, tvin_prt_cx2sbu_V_data_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_prt_cx2sbu_V_data_V = aesl_tmp_4;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_data_V, stream_ingress_size_prt_cx2sbu_V_data_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_data_V, "\n");

		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			stream_ingress_size_prt_cx2sbu_V_data_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_data_V, stream_ingress_size_prt_cx2sbu_V_data_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_data_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.prt_cx2sbu_V_data_V_depth);
		sprintf(tvin_prt_cx2sbu_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_data_V, tvin_prt_cx2sbu_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_data_V, tvin_prt_cx2sbu_V_data_V);

		// release memory allocation
		delete [] prt_cx2sbu_V_data_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_data_V, wrapc_stream_size_in_prt_cx2sbu_V_data_V);
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_data_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_data_V, wrapc_stream_size_in_prt_cx2sbu_V_data_V);
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_data_V, wrapc_stream_size_in_prt_cx2sbu_V_data_V);

		// [[transaction]]
		sprintf(tvin_prt_cx2sbu_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_keep_V, tvin_prt_cx2sbu_V_keep_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_keep_V, tvin_prt_cx2sbu_V_keep_V);

		sc_bv<32>* prt_cx2sbu_V_keep_V_tvin_wrapc_buffer = new sc_bv<32>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: prt_cx2sbu_V_keep_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: prt_cx2sbu.V.keep.V(31, 0)
				{
					// carray: (0) => (aesl_tmp_4 - aesl_tmp_5 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_4 - aesl_tmp_5 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].keep
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].keep
							// regulate_c_name       : prt_cx2sbu_V_keep_V
							// input_type_conversion : (aesl_tmp_3[i_0].keep).to_string(2).c_str()
							if (&(aesl_tmp_3[0].keep) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> prt_cx2sbu_V_keep_V_tmp_mem;
								prt_cx2sbu_V_keep_V_tmp_mem = (aesl_tmp_3[i_0].keep).to_string(2).c_str();
								prt_cx2sbu_V_keep_V_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = prt_cx2sbu_V_keep_V_tmp_mem.range(31, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvin_prt_cx2sbu_V_keep_V, "%s\n", (prt_cx2sbu_V_keep_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_keep_V, tvin_prt_cx2sbu_V_keep_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_prt_cx2sbu_V_keep_V = aesl_tmp_4;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_keep_V, stream_ingress_size_prt_cx2sbu_V_keep_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_keep_V, "\n");

		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			stream_ingress_size_prt_cx2sbu_V_keep_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_keep_V, stream_ingress_size_prt_cx2sbu_V_keep_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_keep_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.prt_cx2sbu_V_keep_V_depth);
		sprintf(tvin_prt_cx2sbu_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_keep_V, tvin_prt_cx2sbu_V_keep_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_keep_V, tvin_prt_cx2sbu_V_keep_V);

		// release memory allocation
		delete [] prt_cx2sbu_V_keep_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_keep_V, wrapc_stream_size_in_prt_cx2sbu_V_keep_V);
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_keep_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_keep_V, wrapc_stream_size_in_prt_cx2sbu_V_keep_V);
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_keep_V, wrapc_stream_size_in_prt_cx2sbu_V_keep_V);

		// [[transaction]]
		sprintf(tvin_prt_cx2sbu_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_last_V, tvin_prt_cx2sbu_V_last_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_last_V, tvin_prt_cx2sbu_V_last_V);

		sc_bv<1>* prt_cx2sbu_V_last_V_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: prt_cx2sbu_V_last_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: prt_cx2sbu.V.last.V(0, 0)
				{
					// carray: (0) => (aesl_tmp_4 - aesl_tmp_5 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_4 - aesl_tmp_5 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].last
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].last
							// regulate_c_name       : prt_cx2sbu_V_last_V
							// input_type_conversion : (aesl_tmp_3[i_0].last).to_string(2).c_str()
							if (&(aesl_tmp_3[0].last) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<1> prt_cx2sbu_V_last_V_tmp_mem;
								prt_cx2sbu_V_last_V_tmp_mem = (aesl_tmp_3[i_0].last).to_string(2).c_str();
								prt_cx2sbu_V_last_V_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = prt_cx2sbu_V_last_V_tmp_mem.range(0, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvin_prt_cx2sbu_V_last_V, "%s\n", (prt_cx2sbu_V_last_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_last_V, tvin_prt_cx2sbu_V_last_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_prt_cx2sbu_V_last_V = aesl_tmp_4;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_last_V, stream_ingress_size_prt_cx2sbu_V_last_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_last_V, "\n");

		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			stream_ingress_size_prt_cx2sbu_V_last_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_last_V, stream_ingress_size_prt_cx2sbu_V_last_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_last_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.prt_cx2sbu_V_last_V_depth);
		sprintf(tvin_prt_cx2sbu_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_last_V, tvin_prt_cx2sbu_V_last_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_last_V, tvin_prt_cx2sbu_V_last_V);

		// release memory allocation
		delete [] prt_cx2sbu_V_last_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_last_V, wrapc_stream_size_in_prt_cx2sbu_V_last_V);
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_last_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_last_V, wrapc_stream_size_in_prt_cx2sbu_V_last_V);
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_last_V, wrapc_stream_size_in_prt_cx2sbu_V_last_V);

		// [[transaction]]
		sprintf(tvin_prt_cx2sbu_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_id_V, tvin_prt_cx2sbu_V_id_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_id_V, tvin_prt_cx2sbu_V_id_V);

		sc_bv<3>* prt_cx2sbu_V_id_V_tvin_wrapc_buffer = new sc_bv<3>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: prt_cx2sbu_V_id_V
		{
			// bitslice(2, 0)
			{
				int hls_map_index = 0;
				// celement: prt_cx2sbu.V.id.V(2, 0)
				{
					// carray: (0) => (aesl_tmp_4 - aesl_tmp_5 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_4 - aesl_tmp_5 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].id
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].id
							// regulate_c_name       : prt_cx2sbu_V_id_V
							// input_type_conversion : (aesl_tmp_3[i_0].id).to_string(2).c_str()
							if (&(aesl_tmp_3[0].id) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<3> prt_cx2sbu_V_id_V_tmp_mem;
								prt_cx2sbu_V_id_V_tmp_mem = (aesl_tmp_3[i_0].id).to_string(2).c_str();
								prt_cx2sbu_V_id_V_tvin_wrapc_buffer[hls_map_index++].range(2, 0) = prt_cx2sbu_V_id_V_tmp_mem.range(2, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvin_prt_cx2sbu_V_id_V, "%s\n", (prt_cx2sbu_V_id_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_id_V, tvin_prt_cx2sbu_V_id_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_prt_cx2sbu_V_id_V = aesl_tmp_4;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_id_V, stream_ingress_size_prt_cx2sbu_V_id_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_id_V, "\n");

		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			stream_ingress_size_prt_cx2sbu_V_id_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_id_V, stream_ingress_size_prt_cx2sbu_V_id_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_id_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.prt_cx2sbu_V_id_V_depth);
		sprintf(tvin_prt_cx2sbu_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_id_V, tvin_prt_cx2sbu_V_id_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_id_V, tvin_prt_cx2sbu_V_id_V);

		// release memory allocation
		delete [] prt_cx2sbu_V_id_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_id_V, wrapc_stream_size_in_prt_cx2sbu_V_id_V);
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_id_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_id_V, wrapc_stream_size_in_prt_cx2sbu_V_id_V);
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_id_V, wrapc_stream_size_in_prt_cx2sbu_V_id_V);

		// [[transaction]]
		sprintf(tvin_prt_cx2sbu_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_user_V, tvin_prt_cx2sbu_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_user_V, tvin_prt_cx2sbu_V_user_V);

		sc_bv<12>* prt_cx2sbu_V_user_V_tvin_wrapc_buffer = new sc_bv<12>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: prt_cx2sbu_V_user_V
		{
			// bitslice(11, 0)
			{
				int hls_map_index = 0;
				// celement: prt_cx2sbu.V.user.V(11, 0)
				{
					// carray: (0) => (aesl_tmp_4 - aesl_tmp_5 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_4 - aesl_tmp_5 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].user
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].user
							// regulate_c_name       : prt_cx2sbu_V_user_V
							// input_type_conversion : (aesl_tmp_3[i_0].user).to_string(2).c_str()
							if (&(aesl_tmp_3[0].user) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<12> prt_cx2sbu_V_user_V_tmp_mem;
								prt_cx2sbu_V_user_V_tmp_mem = (aesl_tmp_3[i_0].user).to_string(2).c_str();
								prt_cx2sbu_V_user_V_tvin_wrapc_buffer[hls_map_index++].range(11, 0) = prt_cx2sbu_V_user_V_tmp_mem.range(11, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvin_prt_cx2sbu_V_user_V, "%s\n", (prt_cx2sbu_V_user_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_user_V, tvin_prt_cx2sbu_V_user_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_prt_cx2sbu_V_user_V = aesl_tmp_4;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_user_V, stream_ingress_size_prt_cx2sbu_V_user_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_user_V, "\n");

		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			stream_ingress_size_prt_cx2sbu_V_user_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_user_V, stream_ingress_size_prt_cx2sbu_V_user_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_user_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.prt_cx2sbu_V_user_V_depth);
		sprintf(tvin_prt_cx2sbu_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_prt_cx2sbu_V_user_V, tvin_prt_cx2sbu_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_prt_cx2sbu_V_user_V, tvin_prt_cx2sbu_V_user_V);

		// release memory allocation
		delete [] prt_cx2sbu_V_user_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_user_V, wrapc_stream_size_in_prt_cx2sbu_V_user_V);
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_user_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_user_V, wrapc_stream_size_in_prt_cx2sbu_V_user_V);
		sprintf(wrapc_stream_size_in_prt_cx2sbu_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_prt_cx2sbu_V_user_V, wrapc_stream_size_in_prt_cx2sbu_V_user_V);

		// [[transaction]]
		sprintf(tvin_mlx2sbu_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_data_V, tvin_mlx2sbu_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_data_V, tvin_mlx2sbu_V_data_V);

		sc_bv<256>* mlx2sbu_V_data_V_tvin_wrapc_buffer = new sc_bv<256>[aesl_tmp_7 - aesl_tmp_8];

		// RTL Name: mlx2sbu_V_data_V
		{
			// bitslice(255, 0)
			{
				int hls_map_index = 0;
				// celement: mlx2sbu.V.data.V(255, 0)
				{
					// carray: (0) => (aesl_tmp_7 - aesl_tmp_8 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_7 - aesl_tmp_8 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_6[i_0].data
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_6[0].data
							// regulate_c_name       : mlx2sbu_V_data_V
							// input_type_conversion : (aesl_tmp_6[i_0].data).to_string(2).c_str()
							if (&(aesl_tmp_6[0].data) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<256> mlx2sbu_V_data_V_tmp_mem;
								mlx2sbu_V_data_V_tmp_mem = (aesl_tmp_6[i_0].data).to_string(2).c_str();
								mlx2sbu_V_data_V_tvin_wrapc_buffer[hls_map_index++].range(255, 0) = mlx2sbu_V_data_V_tmp_mem.range(255, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_7 - aesl_tmp_8; i++)
		{
			sprintf(tvin_mlx2sbu_V_data_V, "%s\n", (mlx2sbu_V_data_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_data_V, tvin_mlx2sbu_V_data_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_mlx2sbu_V_data_V = aesl_tmp_7;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_data_V, stream_ingress_size_mlx2sbu_V_data_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_data_V, "\n");

		for (int i = 0; i < aesl_tmp_7 - aesl_tmp_8; i++)
		{
			stream_ingress_size_mlx2sbu_V_data_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_data_V, stream_ingress_size_mlx2sbu_V_data_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_data_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_7 - aesl_tmp_8, &tcl_file.mlx2sbu_V_data_V_depth);
		sprintf(tvin_mlx2sbu_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_data_V, tvin_mlx2sbu_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_data_V, tvin_mlx2sbu_V_data_V);

		// release memory allocation
		delete [] mlx2sbu_V_data_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_mlx2sbu_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_data_V, wrapc_stream_size_in_mlx2sbu_V_data_V);
		sprintf(wrapc_stream_size_in_mlx2sbu_V_data_V, "%d\n", aesl_tmp_7 - aesl_tmp_8);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_data_V, wrapc_stream_size_in_mlx2sbu_V_data_V);
		sprintf(wrapc_stream_size_in_mlx2sbu_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_data_V, wrapc_stream_size_in_mlx2sbu_V_data_V);

		// [[transaction]]
		sprintf(tvin_mlx2sbu_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_keep_V, tvin_mlx2sbu_V_keep_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_keep_V, tvin_mlx2sbu_V_keep_V);

		sc_bv<32>* mlx2sbu_V_keep_V_tvin_wrapc_buffer = new sc_bv<32>[aesl_tmp_7 - aesl_tmp_8];

		// RTL Name: mlx2sbu_V_keep_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: mlx2sbu.V.keep.V(31, 0)
				{
					// carray: (0) => (aesl_tmp_7 - aesl_tmp_8 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_7 - aesl_tmp_8 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_6[i_0].keep
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_6[0].keep
							// regulate_c_name       : mlx2sbu_V_keep_V
							// input_type_conversion : (aesl_tmp_6[i_0].keep).to_string(2).c_str()
							if (&(aesl_tmp_6[0].keep) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> mlx2sbu_V_keep_V_tmp_mem;
								mlx2sbu_V_keep_V_tmp_mem = (aesl_tmp_6[i_0].keep).to_string(2).c_str();
								mlx2sbu_V_keep_V_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = mlx2sbu_V_keep_V_tmp_mem.range(31, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_7 - aesl_tmp_8; i++)
		{
			sprintf(tvin_mlx2sbu_V_keep_V, "%s\n", (mlx2sbu_V_keep_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_keep_V, tvin_mlx2sbu_V_keep_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_mlx2sbu_V_keep_V = aesl_tmp_7;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_keep_V, stream_ingress_size_mlx2sbu_V_keep_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_keep_V, "\n");

		for (int i = 0; i < aesl_tmp_7 - aesl_tmp_8; i++)
		{
			stream_ingress_size_mlx2sbu_V_keep_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_keep_V, stream_ingress_size_mlx2sbu_V_keep_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_keep_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_7 - aesl_tmp_8, &tcl_file.mlx2sbu_V_keep_V_depth);
		sprintf(tvin_mlx2sbu_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_keep_V, tvin_mlx2sbu_V_keep_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_keep_V, tvin_mlx2sbu_V_keep_V);

		// release memory allocation
		delete [] mlx2sbu_V_keep_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_mlx2sbu_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_keep_V, wrapc_stream_size_in_mlx2sbu_V_keep_V);
		sprintf(wrapc_stream_size_in_mlx2sbu_V_keep_V, "%d\n", aesl_tmp_7 - aesl_tmp_8);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_keep_V, wrapc_stream_size_in_mlx2sbu_V_keep_V);
		sprintf(wrapc_stream_size_in_mlx2sbu_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_keep_V, wrapc_stream_size_in_mlx2sbu_V_keep_V);

		// [[transaction]]
		sprintf(tvin_mlx2sbu_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_last_V, tvin_mlx2sbu_V_last_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_last_V, tvin_mlx2sbu_V_last_V);

		sc_bv<1>* mlx2sbu_V_last_V_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_7 - aesl_tmp_8];

		// RTL Name: mlx2sbu_V_last_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: mlx2sbu.V.last.V(0, 0)
				{
					// carray: (0) => (aesl_tmp_7 - aesl_tmp_8 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_7 - aesl_tmp_8 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_6[i_0].last
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_6[0].last
							// regulate_c_name       : mlx2sbu_V_last_V
							// input_type_conversion : (aesl_tmp_6[i_0].last).to_string(2).c_str()
							if (&(aesl_tmp_6[0].last) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<1> mlx2sbu_V_last_V_tmp_mem;
								mlx2sbu_V_last_V_tmp_mem = (aesl_tmp_6[i_0].last).to_string(2).c_str();
								mlx2sbu_V_last_V_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = mlx2sbu_V_last_V_tmp_mem.range(0, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_7 - aesl_tmp_8; i++)
		{
			sprintf(tvin_mlx2sbu_V_last_V, "%s\n", (mlx2sbu_V_last_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_last_V, tvin_mlx2sbu_V_last_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_mlx2sbu_V_last_V = aesl_tmp_7;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_last_V, stream_ingress_size_mlx2sbu_V_last_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_last_V, "\n");

		for (int i = 0; i < aesl_tmp_7 - aesl_tmp_8; i++)
		{
			stream_ingress_size_mlx2sbu_V_last_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_last_V, stream_ingress_size_mlx2sbu_V_last_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_last_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_7 - aesl_tmp_8, &tcl_file.mlx2sbu_V_last_V_depth);
		sprintf(tvin_mlx2sbu_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_last_V, tvin_mlx2sbu_V_last_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_last_V, tvin_mlx2sbu_V_last_V);

		// release memory allocation
		delete [] mlx2sbu_V_last_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_mlx2sbu_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_last_V, wrapc_stream_size_in_mlx2sbu_V_last_V);
		sprintf(wrapc_stream_size_in_mlx2sbu_V_last_V, "%d\n", aesl_tmp_7 - aesl_tmp_8);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_last_V, wrapc_stream_size_in_mlx2sbu_V_last_V);
		sprintf(wrapc_stream_size_in_mlx2sbu_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_last_V, wrapc_stream_size_in_mlx2sbu_V_last_V);

		// [[transaction]]
		sprintf(tvin_mlx2sbu_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_id_V, tvin_mlx2sbu_V_id_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_id_V, tvin_mlx2sbu_V_id_V);

		sc_bv<3>* mlx2sbu_V_id_V_tvin_wrapc_buffer = new sc_bv<3>[aesl_tmp_7 - aesl_tmp_8];

		// RTL Name: mlx2sbu_V_id_V
		{
			// bitslice(2, 0)
			{
				int hls_map_index = 0;
				// celement: mlx2sbu.V.id.V(2, 0)
				{
					// carray: (0) => (aesl_tmp_7 - aesl_tmp_8 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_7 - aesl_tmp_8 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_6[i_0].id
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_6[0].id
							// regulate_c_name       : mlx2sbu_V_id_V
							// input_type_conversion : (aesl_tmp_6[i_0].id).to_string(2).c_str()
							if (&(aesl_tmp_6[0].id) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<3> mlx2sbu_V_id_V_tmp_mem;
								mlx2sbu_V_id_V_tmp_mem = (aesl_tmp_6[i_0].id).to_string(2).c_str();
								mlx2sbu_V_id_V_tvin_wrapc_buffer[hls_map_index++].range(2, 0) = mlx2sbu_V_id_V_tmp_mem.range(2, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_7 - aesl_tmp_8; i++)
		{
			sprintf(tvin_mlx2sbu_V_id_V, "%s\n", (mlx2sbu_V_id_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_id_V, tvin_mlx2sbu_V_id_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_mlx2sbu_V_id_V = aesl_tmp_7;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_id_V, stream_ingress_size_mlx2sbu_V_id_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_id_V, "\n");

		for (int i = 0; i < aesl_tmp_7 - aesl_tmp_8; i++)
		{
			stream_ingress_size_mlx2sbu_V_id_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_id_V, stream_ingress_size_mlx2sbu_V_id_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_id_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_7 - aesl_tmp_8, &tcl_file.mlx2sbu_V_id_V_depth);
		sprintf(tvin_mlx2sbu_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_id_V, tvin_mlx2sbu_V_id_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_id_V, tvin_mlx2sbu_V_id_V);

		// release memory allocation
		delete [] mlx2sbu_V_id_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_mlx2sbu_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_id_V, wrapc_stream_size_in_mlx2sbu_V_id_V);
		sprintf(wrapc_stream_size_in_mlx2sbu_V_id_V, "%d\n", aesl_tmp_7 - aesl_tmp_8);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_id_V, wrapc_stream_size_in_mlx2sbu_V_id_V);
		sprintf(wrapc_stream_size_in_mlx2sbu_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_id_V, wrapc_stream_size_in_mlx2sbu_V_id_V);

		// [[transaction]]
		sprintf(tvin_mlx2sbu_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_user_V, tvin_mlx2sbu_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_user_V, tvin_mlx2sbu_V_user_V);

		sc_bv<12>* mlx2sbu_V_user_V_tvin_wrapc_buffer = new sc_bv<12>[aesl_tmp_7 - aesl_tmp_8];

		// RTL Name: mlx2sbu_V_user_V
		{
			// bitslice(11, 0)
			{
				int hls_map_index = 0;
				// celement: mlx2sbu.V.user.V(11, 0)
				{
					// carray: (0) => (aesl_tmp_7 - aesl_tmp_8 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_7 - aesl_tmp_8 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_6[i_0].user
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_6[0].user
							// regulate_c_name       : mlx2sbu_V_user_V
							// input_type_conversion : (aesl_tmp_6[i_0].user).to_string(2).c_str()
							if (&(aesl_tmp_6[0].user) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<12> mlx2sbu_V_user_V_tmp_mem;
								mlx2sbu_V_user_V_tmp_mem = (aesl_tmp_6[i_0].user).to_string(2).c_str();
								mlx2sbu_V_user_V_tvin_wrapc_buffer[hls_map_index++].range(11, 0) = mlx2sbu_V_user_V_tmp_mem.range(11, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_7 - aesl_tmp_8; i++)
		{
			sprintf(tvin_mlx2sbu_V_user_V, "%s\n", (mlx2sbu_V_user_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_user_V, tvin_mlx2sbu_V_user_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_mlx2sbu_V_user_V = aesl_tmp_7;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_user_V, stream_ingress_size_mlx2sbu_V_user_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_user_V, "\n");

		for (int i = 0; i < aesl_tmp_7 - aesl_tmp_8; i++)
		{
			stream_ingress_size_mlx2sbu_V_user_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_user_V, stream_ingress_size_mlx2sbu_V_user_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_user_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_7 - aesl_tmp_8, &tcl_file.mlx2sbu_V_user_V_depth);
		sprintf(tvin_mlx2sbu_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_mlx2sbu_V_user_V, tvin_mlx2sbu_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_mlx2sbu_V_user_V, tvin_mlx2sbu_V_user_V);

		// release memory allocation
		delete [] mlx2sbu_V_user_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_mlx2sbu_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_user_V, wrapc_stream_size_in_mlx2sbu_V_user_V);
		sprintf(wrapc_stream_size_in_mlx2sbu_V_user_V, "%d\n", aesl_tmp_7 - aesl_tmp_8);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_user_V, wrapc_stream_size_in_mlx2sbu_V_user_V);
		sprintf(wrapc_stream_size_in_mlx2sbu_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_mlx2sbu_V_user_V, wrapc_stream_size_in_mlx2sbu_V_user_V);

		// [[transaction]]
		sprintf(tvout_sbu2prt_cx_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_data_V, tvout_sbu2prt_cx_V_data_V);

		sc_bv<256>* sbu2prt_cx_V_data_V_tvout_wrapc_buffer = new sc_bv<256>[aesl_tmp_10 - aesl_tmp_11];

		// RTL Name: sbu2prt_cx_V_data_V
		{
			// bitslice(255, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2prt_cx.V.data.V(255, 0)
				{
					// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
					for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_9[i_0].data
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_9[0].data
							// regulate_c_name       : sbu2prt_cx_V_data_V
							// input_type_conversion : (aesl_tmp_9[i_0].data).to_string(2).c_str()
							if (&(aesl_tmp_9[0].data) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<256> sbu2prt_cx_V_data_V_tmp_mem;
								sbu2prt_cx_V_data_V_tmp_mem = (aesl_tmp_9[i_0].data).to_string(2).c_str();
								sbu2prt_cx_V_data_V_tvout_wrapc_buffer[hls_map_index++].range(255, 0) = sbu2prt_cx_V_data_V_tmp_mem.range(255, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_10 - aesl_tmp_11; i++)
		{
			sprintf(tvout_sbu2prt_cx_V_data_V, "%s\n", (sbu2prt_cx_V_data_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_data_V, tvout_sbu2prt_cx_V_data_V);
		}

		tcl_file.set_num(aesl_tmp_10 - aesl_tmp_11, &tcl_file.sbu2prt_cx_V_data_V_depth);
		sprintf(tvout_sbu2prt_cx_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_data_V, tvout_sbu2prt_cx_V_data_V);

		// release memory allocation
		delete [] sbu2prt_cx_V_data_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_data_V, wrapc_stream_size_out_sbu2prt_cx_V_data_V);
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_data_V, "%d\n", aesl_tmp_10 - aesl_tmp_11);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_data_V, wrapc_stream_size_out_sbu2prt_cx_V_data_V);
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_data_V, wrapc_stream_size_out_sbu2prt_cx_V_data_V);

		// [[transaction]]
		sprintf(tvout_sbu2prt_cx_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_keep_V, tvout_sbu2prt_cx_V_keep_V);

		sc_bv<32>* sbu2prt_cx_V_keep_V_tvout_wrapc_buffer = new sc_bv<32>[aesl_tmp_10 - aesl_tmp_11];

		// RTL Name: sbu2prt_cx_V_keep_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2prt_cx.V.keep.V(31, 0)
				{
					// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
					for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_9[i_0].keep
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_9[0].keep
							// regulate_c_name       : sbu2prt_cx_V_keep_V
							// input_type_conversion : (aesl_tmp_9[i_0].keep).to_string(2).c_str()
							if (&(aesl_tmp_9[0].keep) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> sbu2prt_cx_V_keep_V_tmp_mem;
								sbu2prt_cx_V_keep_V_tmp_mem = (aesl_tmp_9[i_0].keep).to_string(2).c_str();
								sbu2prt_cx_V_keep_V_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = sbu2prt_cx_V_keep_V_tmp_mem.range(31, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_10 - aesl_tmp_11; i++)
		{
			sprintf(tvout_sbu2prt_cx_V_keep_V, "%s\n", (sbu2prt_cx_V_keep_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_keep_V, tvout_sbu2prt_cx_V_keep_V);
		}

		tcl_file.set_num(aesl_tmp_10 - aesl_tmp_11, &tcl_file.sbu2prt_cx_V_keep_V_depth);
		sprintf(tvout_sbu2prt_cx_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_keep_V, tvout_sbu2prt_cx_V_keep_V);

		// release memory allocation
		delete [] sbu2prt_cx_V_keep_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_keep_V, wrapc_stream_size_out_sbu2prt_cx_V_keep_V);
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_keep_V, "%d\n", aesl_tmp_10 - aesl_tmp_11);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_keep_V, wrapc_stream_size_out_sbu2prt_cx_V_keep_V);
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_keep_V, wrapc_stream_size_out_sbu2prt_cx_V_keep_V);

		// [[transaction]]
		sprintf(tvout_sbu2prt_cx_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_last_V, tvout_sbu2prt_cx_V_last_V);

		sc_bv<1>* sbu2prt_cx_V_last_V_tvout_wrapc_buffer = new sc_bv<1>[aesl_tmp_10 - aesl_tmp_11];

		// RTL Name: sbu2prt_cx_V_last_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2prt_cx.V.last.V(0, 0)
				{
					// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
					for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_9[i_0].last
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_9[0].last
							// regulate_c_name       : sbu2prt_cx_V_last_V
							// input_type_conversion : (aesl_tmp_9[i_0].last).to_string(2).c_str()
							if (&(aesl_tmp_9[0].last) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<1> sbu2prt_cx_V_last_V_tmp_mem;
								sbu2prt_cx_V_last_V_tmp_mem = (aesl_tmp_9[i_0].last).to_string(2).c_str();
								sbu2prt_cx_V_last_V_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = sbu2prt_cx_V_last_V_tmp_mem.range(0, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_10 - aesl_tmp_11; i++)
		{
			sprintf(tvout_sbu2prt_cx_V_last_V, "%s\n", (sbu2prt_cx_V_last_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_last_V, tvout_sbu2prt_cx_V_last_V);
		}

		tcl_file.set_num(aesl_tmp_10 - aesl_tmp_11, &tcl_file.sbu2prt_cx_V_last_V_depth);
		sprintf(tvout_sbu2prt_cx_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_last_V, tvout_sbu2prt_cx_V_last_V);

		// release memory allocation
		delete [] sbu2prt_cx_V_last_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_last_V, wrapc_stream_size_out_sbu2prt_cx_V_last_V);
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_last_V, "%d\n", aesl_tmp_10 - aesl_tmp_11);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_last_V, wrapc_stream_size_out_sbu2prt_cx_V_last_V);
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_last_V, wrapc_stream_size_out_sbu2prt_cx_V_last_V);

		// [[transaction]]
		sprintf(tvout_sbu2prt_cx_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_id_V, tvout_sbu2prt_cx_V_id_V);

		sc_bv<3>* sbu2prt_cx_V_id_V_tvout_wrapc_buffer = new sc_bv<3>[aesl_tmp_10 - aesl_tmp_11];

		// RTL Name: sbu2prt_cx_V_id_V
		{
			// bitslice(2, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2prt_cx.V.id.V(2, 0)
				{
					// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
					for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_9[i_0].id
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_9[0].id
							// regulate_c_name       : sbu2prt_cx_V_id_V
							// input_type_conversion : (aesl_tmp_9[i_0].id).to_string(2).c_str()
							if (&(aesl_tmp_9[0].id) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<3> sbu2prt_cx_V_id_V_tmp_mem;
								sbu2prt_cx_V_id_V_tmp_mem = (aesl_tmp_9[i_0].id).to_string(2).c_str();
								sbu2prt_cx_V_id_V_tvout_wrapc_buffer[hls_map_index++].range(2, 0) = sbu2prt_cx_V_id_V_tmp_mem.range(2, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_10 - aesl_tmp_11; i++)
		{
			sprintf(tvout_sbu2prt_cx_V_id_V, "%s\n", (sbu2prt_cx_V_id_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_id_V, tvout_sbu2prt_cx_V_id_V);
		}

		tcl_file.set_num(aesl_tmp_10 - aesl_tmp_11, &tcl_file.sbu2prt_cx_V_id_V_depth);
		sprintf(tvout_sbu2prt_cx_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_id_V, tvout_sbu2prt_cx_V_id_V);

		// release memory allocation
		delete [] sbu2prt_cx_V_id_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_id_V, wrapc_stream_size_out_sbu2prt_cx_V_id_V);
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_id_V, "%d\n", aesl_tmp_10 - aesl_tmp_11);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_id_V, wrapc_stream_size_out_sbu2prt_cx_V_id_V);
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_id_V, wrapc_stream_size_out_sbu2prt_cx_V_id_V);

		// [[transaction]]
		sprintf(tvout_sbu2prt_cx_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_user_V, tvout_sbu2prt_cx_V_user_V);

		sc_bv<12>* sbu2prt_cx_V_user_V_tvout_wrapc_buffer = new sc_bv<12>[aesl_tmp_10 - aesl_tmp_11];

		// RTL Name: sbu2prt_cx_V_user_V
		{
			// bitslice(11, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2prt_cx.V.user.V(11, 0)
				{
					// carray: (aesl_tmp_11) => (aesl_tmp_10 - 1) @ (1)
					for (int i_0 = aesl_tmp_11; i_0 <= aesl_tmp_10 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_9[i_0].user
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_9[0].user
							// regulate_c_name       : sbu2prt_cx_V_user_V
							// input_type_conversion : (aesl_tmp_9[i_0].user).to_string(2).c_str()
							if (&(aesl_tmp_9[0].user) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<12> sbu2prt_cx_V_user_V_tmp_mem;
								sbu2prt_cx_V_user_V_tmp_mem = (aesl_tmp_9[i_0].user).to_string(2).c_str();
								sbu2prt_cx_V_user_V_tvout_wrapc_buffer[hls_map_index++].range(11, 0) = sbu2prt_cx_V_user_V_tmp_mem.range(11, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_10 - aesl_tmp_11; i++)
		{
			sprintf(tvout_sbu2prt_cx_V_user_V, "%s\n", (sbu2prt_cx_V_user_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_user_V, tvout_sbu2prt_cx_V_user_V);
		}

		tcl_file.set_num(aesl_tmp_10 - aesl_tmp_11, &tcl_file.sbu2prt_cx_V_user_V_depth);
		sprintf(tvout_sbu2prt_cx_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_cx_V_user_V, tvout_sbu2prt_cx_V_user_V);

		// release memory allocation
		delete [] sbu2prt_cx_V_user_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_user_V, wrapc_stream_size_out_sbu2prt_cx_V_user_V);
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_user_V, "%d\n", aesl_tmp_10 - aesl_tmp_11);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_user_V, wrapc_stream_size_out_sbu2prt_cx_V_user_V);
		sprintf(wrapc_stream_size_out_sbu2prt_cx_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_cx_V_user_V, wrapc_stream_size_out_sbu2prt_cx_V_user_V);

		// [[transaction]]
		sprintf(tvout_sbu2prt_nw_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_data_V, tvout_sbu2prt_nw_V_data_V);

		sc_bv<256>* sbu2prt_nw_V_data_V_tvout_wrapc_buffer = new sc_bv<256>[aesl_tmp_13 - aesl_tmp_14];

		// RTL Name: sbu2prt_nw_V_data_V
		{
			// bitslice(255, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2prt_nw.V.data.V(255, 0)
				{
					// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
					for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_12[i_0].data
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_12[0].data
							// regulate_c_name       : sbu2prt_nw_V_data_V
							// input_type_conversion : (aesl_tmp_12[i_0].data).to_string(2).c_str()
							if (&(aesl_tmp_12[0].data) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<256> sbu2prt_nw_V_data_V_tmp_mem;
								sbu2prt_nw_V_data_V_tmp_mem = (aesl_tmp_12[i_0].data).to_string(2).c_str();
								sbu2prt_nw_V_data_V_tvout_wrapc_buffer[hls_map_index++].range(255, 0) = sbu2prt_nw_V_data_V_tmp_mem.range(255, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_13 - aesl_tmp_14; i++)
		{
			sprintf(tvout_sbu2prt_nw_V_data_V, "%s\n", (sbu2prt_nw_V_data_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_data_V, tvout_sbu2prt_nw_V_data_V);
		}

		tcl_file.set_num(aesl_tmp_13 - aesl_tmp_14, &tcl_file.sbu2prt_nw_V_data_V_depth);
		sprintf(tvout_sbu2prt_nw_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_data_V, tvout_sbu2prt_nw_V_data_V);

		// release memory allocation
		delete [] sbu2prt_nw_V_data_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_data_V, wrapc_stream_size_out_sbu2prt_nw_V_data_V);
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_data_V, "%d\n", aesl_tmp_13 - aesl_tmp_14);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_data_V, wrapc_stream_size_out_sbu2prt_nw_V_data_V);
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_data_V, wrapc_stream_size_out_sbu2prt_nw_V_data_V);

		// [[transaction]]
		sprintf(tvout_sbu2prt_nw_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_keep_V, tvout_sbu2prt_nw_V_keep_V);

		sc_bv<32>* sbu2prt_nw_V_keep_V_tvout_wrapc_buffer = new sc_bv<32>[aesl_tmp_13 - aesl_tmp_14];

		// RTL Name: sbu2prt_nw_V_keep_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2prt_nw.V.keep.V(31, 0)
				{
					// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
					for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_12[i_0].keep
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_12[0].keep
							// regulate_c_name       : sbu2prt_nw_V_keep_V
							// input_type_conversion : (aesl_tmp_12[i_0].keep).to_string(2).c_str()
							if (&(aesl_tmp_12[0].keep) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> sbu2prt_nw_V_keep_V_tmp_mem;
								sbu2prt_nw_V_keep_V_tmp_mem = (aesl_tmp_12[i_0].keep).to_string(2).c_str();
								sbu2prt_nw_V_keep_V_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = sbu2prt_nw_V_keep_V_tmp_mem.range(31, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_13 - aesl_tmp_14; i++)
		{
			sprintf(tvout_sbu2prt_nw_V_keep_V, "%s\n", (sbu2prt_nw_V_keep_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_keep_V, tvout_sbu2prt_nw_V_keep_V);
		}

		tcl_file.set_num(aesl_tmp_13 - aesl_tmp_14, &tcl_file.sbu2prt_nw_V_keep_V_depth);
		sprintf(tvout_sbu2prt_nw_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_keep_V, tvout_sbu2prt_nw_V_keep_V);

		// release memory allocation
		delete [] sbu2prt_nw_V_keep_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_keep_V, wrapc_stream_size_out_sbu2prt_nw_V_keep_V);
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_keep_V, "%d\n", aesl_tmp_13 - aesl_tmp_14);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_keep_V, wrapc_stream_size_out_sbu2prt_nw_V_keep_V);
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_keep_V, wrapc_stream_size_out_sbu2prt_nw_V_keep_V);

		// [[transaction]]
		sprintf(tvout_sbu2prt_nw_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_last_V, tvout_sbu2prt_nw_V_last_V);

		sc_bv<1>* sbu2prt_nw_V_last_V_tvout_wrapc_buffer = new sc_bv<1>[aesl_tmp_13 - aesl_tmp_14];

		// RTL Name: sbu2prt_nw_V_last_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2prt_nw.V.last.V(0, 0)
				{
					// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
					for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_12[i_0].last
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_12[0].last
							// regulate_c_name       : sbu2prt_nw_V_last_V
							// input_type_conversion : (aesl_tmp_12[i_0].last).to_string(2).c_str()
							if (&(aesl_tmp_12[0].last) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<1> sbu2prt_nw_V_last_V_tmp_mem;
								sbu2prt_nw_V_last_V_tmp_mem = (aesl_tmp_12[i_0].last).to_string(2).c_str();
								sbu2prt_nw_V_last_V_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = sbu2prt_nw_V_last_V_tmp_mem.range(0, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_13 - aesl_tmp_14; i++)
		{
			sprintf(tvout_sbu2prt_nw_V_last_V, "%s\n", (sbu2prt_nw_V_last_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_last_V, tvout_sbu2prt_nw_V_last_V);
		}

		tcl_file.set_num(aesl_tmp_13 - aesl_tmp_14, &tcl_file.sbu2prt_nw_V_last_V_depth);
		sprintf(tvout_sbu2prt_nw_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_last_V, tvout_sbu2prt_nw_V_last_V);

		// release memory allocation
		delete [] sbu2prt_nw_V_last_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_last_V, wrapc_stream_size_out_sbu2prt_nw_V_last_V);
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_last_V, "%d\n", aesl_tmp_13 - aesl_tmp_14);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_last_V, wrapc_stream_size_out_sbu2prt_nw_V_last_V);
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_last_V, wrapc_stream_size_out_sbu2prt_nw_V_last_V);

		// [[transaction]]
		sprintf(tvout_sbu2prt_nw_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_id_V, tvout_sbu2prt_nw_V_id_V);

		sc_bv<3>* sbu2prt_nw_V_id_V_tvout_wrapc_buffer = new sc_bv<3>[aesl_tmp_13 - aesl_tmp_14];

		// RTL Name: sbu2prt_nw_V_id_V
		{
			// bitslice(2, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2prt_nw.V.id.V(2, 0)
				{
					// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
					for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_12[i_0].id
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_12[0].id
							// regulate_c_name       : sbu2prt_nw_V_id_V
							// input_type_conversion : (aesl_tmp_12[i_0].id).to_string(2).c_str()
							if (&(aesl_tmp_12[0].id) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<3> sbu2prt_nw_V_id_V_tmp_mem;
								sbu2prt_nw_V_id_V_tmp_mem = (aesl_tmp_12[i_0].id).to_string(2).c_str();
								sbu2prt_nw_V_id_V_tvout_wrapc_buffer[hls_map_index++].range(2, 0) = sbu2prt_nw_V_id_V_tmp_mem.range(2, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_13 - aesl_tmp_14; i++)
		{
			sprintf(tvout_sbu2prt_nw_V_id_V, "%s\n", (sbu2prt_nw_V_id_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_id_V, tvout_sbu2prt_nw_V_id_V);
		}

		tcl_file.set_num(aesl_tmp_13 - aesl_tmp_14, &tcl_file.sbu2prt_nw_V_id_V_depth);
		sprintf(tvout_sbu2prt_nw_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_id_V, tvout_sbu2prt_nw_V_id_V);

		// release memory allocation
		delete [] sbu2prt_nw_V_id_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_id_V, wrapc_stream_size_out_sbu2prt_nw_V_id_V);
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_id_V, "%d\n", aesl_tmp_13 - aesl_tmp_14);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_id_V, wrapc_stream_size_out_sbu2prt_nw_V_id_V);
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_id_V, wrapc_stream_size_out_sbu2prt_nw_V_id_V);

		// [[transaction]]
		sprintf(tvout_sbu2prt_nw_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_user_V, tvout_sbu2prt_nw_V_user_V);

		sc_bv<12>* sbu2prt_nw_V_user_V_tvout_wrapc_buffer = new sc_bv<12>[aesl_tmp_13 - aesl_tmp_14];

		// RTL Name: sbu2prt_nw_V_user_V
		{
			// bitslice(11, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2prt_nw.V.user.V(11, 0)
				{
					// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
					for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_12[i_0].user
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_12[0].user
							// regulate_c_name       : sbu2prt_nw_V_user_V
							// input_type_conversion : (aesl_tmp_12[i_0].user).to_string(2).c_str()
							if (&(aesl_tmp_12[0].user) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<12> sbu2prt_nw_V_user_V_tmp_mem;
								sbu2prt_nw_V_user_V_tmp_mem = (aesl_tmp_12[i_0].user).to_string(2).c_str();
								sbu2prt_nw_V_user_V_tvout_wrapc_buffer[hls_map_index++].range(11, 0) = sbu2prt_nw_V_user_V_tmp_mem.range(11, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_13 - aesl_tmp_14; i++)
		{
			sprintf(tvout_sbu2prt_nw_V_user_V, "%s\n", (sbu2prt_nw_V_user_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_user_V, tvout_sbu2prt_nw_V_user_V);
		}

		tcl_file.set_num(aesl_tmp_13 - aesl_tmp_14, &tcl_file.sbu2prt_nw_V_user_V_depth);
		sprintf(tvout_sbu2prt_nw_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2prt_nw_V_user_V, tvout_sbu2prt_nw_V_user_V);

		// release memory allocation
		delete [] sbu2prt_nw_V_user_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_user_V, wrapc_stream_size_out_sbu2prt_nw_V_user_V);
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_user_V, "%d\n", aesl_tmp_13 - aesl_tmp_14);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_user_V, wrapc_stream_size_out_sbu2prt_nw_V_user_V);
		sprintf(wrapc_stream_size_out_sbu2prt_nw_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2prt_nw_V_user_V, wrapc_stream_size_out_sbu2prt_nw_V_user_V);

		// [[transaction]]
		sprintf(tvout_sbu2mlx_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_data_V, tvout_sbu2mlx_V_data_V);

		sc_bv<256>* sbu2mlx_V_data_V_tvout_wrapc_buffer = new sc_bv<256>[aesl_tmp_16 - aesl_tmp_17];

		// RTL Name: sbu2mlx_V_data_V
		{
			// bitslice(255, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2mlx.V.data.V(255, 0)
				{
					// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
					for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_15[i_0].data
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_15[0].data
							// regulate_c_name       : sbu2mlx_V_data_V
							// input_type_conversion : (aesl_tmp_15[i_0].data).to_string(2).c_str()
							if (&(aesl_tmp_15[0].data) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<256> sbu2mlx_V_data_V_tmp_mem;
								sbu2mlx_V_data_V_tmp_mem = (aesl_tmp_15[i_0].data).to_string(2).c_str();
								sbu2mlx_V_data_V_tvout_wrapc_buffer[hls_map_index++].range(255, 0) = sbu2mlx_V_data_V_tmp_mem.range(255, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_16 - aesl_tmp_17; i++)
		{
			sprintf(tvout_sbu2mlx_V_data_V, "%s\n", (sbu2mlx_V_data_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_data_V, tvout_sbu2mlx_V_data_V);
		}

		tcl_file.set_num(aesl_tmp_16 - aesl_tmp_17, &tcl_file.sbu2mlx_V_data_V_depth);
		sprintf(tvout_sbu2mlx_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_data_V, tvout_sbu2mlx_V_data_V);

		// release memory allocation
		delete [] sbu2mlx_V_data_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2mlx_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_data_V, wrapc_stream_size_out_sbu2mlx_V_data_V);
		sprintf(wrapc_stream_size_out_sbu2mlx_V_data_V, "%d\n", aesl_tmp_16 - aesl_tmp_17);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_data_V, wrapc_stream_size_out_sbu2mlx_V_data_V);
		sprintf(wrapc_stream_size_out_sbu2mlx_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_data_V, wrapc_stream_size_out_sbu2mlx_V_data_V);

		// [[transaction]]
		sprintf(tvout_sbu2mlx_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_keep_V, tvout_sbu2mlx_V_keep_V);

		sc_bv<32>* sbu2mlx_V_keep_V_tvout_wrapc_buffer = new sc_bv<32>[aesl_tmp_16 - aesl_tmp_17];

		// RTL Name: sbu2mlx_V_keep_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2mlx.V.keep.V(31, 0)
				{
					// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
					for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_15[i_0].keep
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_15[0].keep
							// regulate_c_name       : sbu2mlx_V_keep_V
							// input_type_conversion : (aesl_tmp_15[i_0].keep).to_string(2).c_str()
							if (&(aesl_tmp_15[0].keep) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> sbu2mlx_V_keep_V_tmp_mem;
								sbu2mlx_V_keep_V_tmp_mem = (aesl_tmp_15[i_0].keep).to_string(2).c_str();
								sbu2mlx_V_keep_V_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = sbu2mlx_V_keep_V_tmp_mem.range(31, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_16 - aesl_tmp_17; i++)
		{
			sprintf(tvout_sbu2mlx_V_keep_V, "%s\n", (sbu2mlx_V_keep_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_keep_V, tvout_sbu2mlx_V_keep_V);
		}

		tcl_file.set_num(aesl_tmp_16 - aesl_tmp_17, &tcl_file.sbu2mlx_V_keep_V_depth);
		sprintf(tvout_sbu2mlx_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_keep_V, tvout_sbu2mlx_V_keep_V);

		// release memory allocation
		delete [] sbu2mlx_V_keep_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2mlx_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_keep_V, wrapc_stream_size_out_sbu2mlx_V_keep_V);
		sprintf(wrapc_stream_size_out_sbu2mlx_V_keep_V, "%d\n", aesl_tmp_16 - aesl_tmp_17);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_keep_V, wrapc_stream_size_out_sbu2mlx_V_keep_V);
		sprintf(wrapc_stream_size_out_sbu2mlx_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_keep_V, wrapc_stream_size_out_sbu2mlx_V_keep_V);

		// [[transaction]]
		sprintf(tvout_sbu2mlx_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_last_V, tvout_sbu2mlx_V_last_V);

		sc_bv<1>* sbu2mlx_V_last_V_tvout_wrapc_buffer = new sc_bv<1>[aesl_tmp_16 - aesl_tmp_17];

		// RTL Name: sbu2mlx_V_last_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2mlx.V.last.V(0, 0)
				{
					// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
					for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_15[i_0].last
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_15[0].last
							// regulate_c_name       : sbu2mlx_V_last_V
							// input_type_conversion : (aesl_tmp_15[i_0].last).to_string(2).c_str()
							if (&(aesl_tmp_15[0].last) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<1> sbu2mlx_V_last_V_tmp_mem;
								sbu2mlx_V_last_V_tmp_mem = (aesl_tmp_15[i_0].last).to_string(2).c_str();
								sbu2mlx_V_last_V_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = sbu2mlx_V_last_V_tmp_mem.range(0, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_16 - aesl_tmp_17; i++)
		{
			sprintf(tvout_sbu2mlx_V_last_V, "%s\n", (sbu2mlx_V_last_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_last_V, tvout_sbu2mlx_V_last_V);
		}

		tcl_file.set_num(aesl_tmp_16 - aesl_tmp_17, &tcl_file.sbu2mlx_V_last_V_depth);
		sprintf(tvout_sbu2mlx_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_last_V, tvout_sbu2mlx_V_last_V);

		// release memory allocation
		delete [] sbu2mlx_V_last_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2mlx_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_last_V, wrapc_stream_size_out_sbu2mlx_V_last_V);
		sprintf(wrapc_stream_size_out_sbu2mlx_V_last_V, "%d\n", aesl_tmp_16 - aesl_tmp_17);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_last_V, wrapc_stream_size_out_sbu2mlx_V_last_V);
		sprintf(wrapc_stream_size_out_sbu2mlx_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_last_V, wrapc_stream_size_out_sbu2mlx_V_last_V);

		// [[transaction]]
		sprintf(tvout_sbu2mlx_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_id_V, tvout_sbu2mlx_V_id_V);

		sc_bv<3>* sbu2mlx_V_id_V_tvout_wrapc_buffer = new sc_bv<3>[aesl_tmp_16 - aesl_tmp_17];

		// RTL Name: sbu2mlx_V_id_V
		{
			// bitslice(2, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2mlx.V.id.V(2, 0)
				{
					// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
					for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_15[i_0].id
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_15[0].id
							// regulate_c_name       : sbu2mlx_V_id_V
							// input_type_conversion : (aesl_tmp_15[i_0].id).to_string(2).c_str()
							if (&(aesl_tmp_15[0].id) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<3> sbu2mlx_V_id_V_tmp_mem;
								sbu2mlx_V_id_V_tmp_mem = (aesl_tmp_15[i_0].id).to_string(2).c_str();
								sbu2mlx_V_id_V_tvout_wrapc_buffer[hls_map_index++].range(2, 0) = sbu2mlx_V_id_V_tmp_mem.range(2, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_16 - aesl_tmp_17; i++)
		{
			sprintf(tvout_sbu2mlx_V_id_V, "%s\n", (sbu2mlx_V_id_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_id_V, tvout_sbu2mlx_V_id_V);
		}

		tcl_file.set_num(aesl_tmp_16 - aesl_tmp_17, &tcl_file.sbu2mlx_V_id_V_depth);
		sprintf(tvout_sbu2mlx_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_id_V, tvout_sbu2mlx_V_id_V);

		// release memory allocation
		delete [] sbu2mlx_V_id_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2mlx_V_id_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_id_V, wrapc_stream_size_out_sbu2mlx_V_id_V);
		sprintf(wrapc_stream_size_out_sbu2mlx_V_id_V, "%d\n", aesl_tmp_16 - aesl_tmp_17);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_id_V, wrapc_stream_size_out_sbu2mlx_V_id_V);
		sprintf(wrapc_stream_size_out_sbu2mlx_V_id_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_id_V, wrapc_stream_size_out_sbu2mlx_V_id_V);

		// [[transaction]]
		sprintf(tvout_sbu2mlx_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_user_V, tvout_sbu2mlx_V_user_V);

		sc_bv<12>* sbu2mlx_V_user_V_tvout_wrapc_buffer = new sc_bv<12>[aesl_tmp_16 - aesl_tmp_17];

		// RTL Name: sbu2mlx_V_user_V
		{
			// bitslice(11, 0)
			{
				int hls_map_index = 0;
				// celement: sbu2mlx.V.user.V(11, 0)
				{
					// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
					for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_15[i_0].user
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_15[0].user
							// regulate_c_name       : sbu2mlx_V_user_V
							// input_type_conversion : (aesl_tmp_15[i_0].user).to_string(2).c_str()
							if (&(aesl_tmp_15[0].user) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<12> sbu2mlx_V_user_V_tmp_mem;
								sbu2mlx_V_user_V_tmp_mem = (aesl_tmp_15[i_0].user).to_string(2).c_str();
								sbu2mlx_V_user_V_tvout_wrapc_buffer[hls_map_index++].range(11, 0) = sbu2mlx_V_user_V_tmp_mem.range(11, 0);
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_16 - aesl_tmp_17; i++)
		{
			sprintf(tvout_sbu2mlx_V_user_V, "%s\n", (sbu2mlx_V_user_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_user_V, tvout_sbu2mlx_V_user_V);
		}

		tcl_file.set_num(aesl_tmp_16 - aesl_tmp_17, &tcl_file.sbu2mlx_V_user_V_depth);
		sprintf(tvout_sbu2mlx_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sbu2mlx_V_user_V, tvout_sbu2mlx_V_user_V);

		// release memory allocation
		delete [] sbu2mlx_V_user_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_sbu2mlx_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_user_V, wrapc_stream_size_out_sbu2mlx_V_user_V);
		sprintf(wrapc_stream_size_out_sbu2mlx_V_user_V, "%d\n", aesl_tmp_16 - aesl_tmp_17);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_user_V, wrapc_stream_size_out_sbu2mlx_V_user_V);
		sprintf(wrapc_stream_size_out_sbu2mlx_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_sbu2mlx_V_user_V, wrapc_stream_size_out_sbu2mlx_V_user_V);

		// push back output stream: "sbu2prt_cx"
		for (int i = 0; i < aesl_tmp_10; i++)
		{
			sbu2prt_cx.write(aesl_tmp_9[i]);
		}

		// push back output stream: "sbu2prt_nw"
		for (int i = 0; i < aesl_tmp_13; i++)
		{
			sbu2prt_nw.write(aesl_tmp_12[i]);
		}

		// push back output stream: "sbu2mlx"
		for (int i = 0; i < aesl_tmp_16; i++)
		{
			sbu2mlx.write(aesl_tmp_15[i]);
		}

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "prt_nw2sbu_V_data_V"
		delete [] tvin_prt_nw2sbu_V_data_V;
		delete [] wrapc_stream_size_in_prt_nw2sbu_V_data_V;
		// release memory allocation: "prt_nw2sbu_V_keep_V"
		delete [] tvin_prt_nw2sbu_V_keep_V;
		delete [] wrapc_stream_size_in_prt_nw2sbu_V_keep_V;
		// release memory allocation: "prt_nw2sbu_V_last_V"
		delete [] tvin_prt_nw2sbu_V_last_V;
		delete [] wrapc_stream_size_in_prt_nw2sbu_V_last_V;
		// release memory allocation: "prt_nw2sbu_V_id_V"
		delete [] tvin_prt_nw2sbu_V_id_V;
		delete [] wrapc_stream_size_in_prt_nw2sbu_V_id_V;
		// release memory allocation: "prt_nw2sbu_V_user_V"
		delete [] tvin_prt_nw2sbu_V_user_V;
		delete [] wrapc_stream_size_in_prt_nw2sbu_V_user_V;
		// release memory allocation: "prt_cx2sbu_V_data_V"
		delete [] tvin_prt_cx2sbu_V_data_V;
		delete [] wrapc_stream_size_in_prt_cx2sbu_V_data_V;
		// release memory allocation: "prt_cx2sbu_V_keep_V"
		delete [] tvin_prt_cx2sbu_V_keep_V;
		delete [] wrapc_stream_size_in_prt_cx2sbu_V_keep_V;
		// release memory allocation: "prt_cx2sbu_V_last_V"
		delete [] tvin_prt_cx2sbu_V_last_V;
		delete [] wrapc_stream_size_in_prt_cx2sbu_V_last_V;
		// release memory allocation: "prt_cx2sbu_V_id_V"
		delete [] tvin_prt_cx2sbu_V_id_V;
		delete [] wrapc_stream_size_in_prt_cx2sbu_V_id_V;
		// release memory allocation: "prt_cx2sbu_V_user_V"
		delete [] tvin_prt_cx2sbu_V_user_V;
		delete [] wrapc_stream_size_in_prt_cx2sbu_V_user_V;
		// release memory allocation: "mlx2sbu_V_data_V"
		delete [] tvin_mlx2sbu_V_data_V;
		delete [] wrapc_stream_size_in_mlx2sbu_V_data_V;
		// release memory allocation: "mlx2sbu_V_keep_V"
		delete [] tvin_mlx2sbu_V_keep_V;
		delete [] wrapc_stream_size_in_mlx2sbu_V_keep_V;
		// release memory allocation: "mlx2sbu_V_last_V"
		delete [] tvin_mlx2sbu_V_last_V;
		delete [] wrapc_stream_size_in_mlx2sbu_V_last_V;
		// release memory allocation: "mlx2sbu_V_id_V"
		delete [] tvin_mlx2sbu_V_id_V;
		delete [] wrapc_stream_size_in_mlx2sbu_V_id_V;
		// release memory allocation: "mlx2sbu_V_user_V"
		delete [] tvin_mlx2sbu_V_user_V;
		delete [] wrapc_stream_size_in_mlx2sbu_V_user_V;
		// release memory allocation: "sbu2prt_cx_V_data_V"
		delete [] tvout_sbu2prt_cx_V_data_V;
		delete [] tvin_sbu2prt_cx_V_data_V;
		delete [] wrapc_stream_size_out_sbu2prt_cx_V_data_V;
		// release memory allocation: "sbu2prt_cx_V_keep_V"
		delete [] tvout_sbu2prt_cx_V_keep_V;
		delete [] tvin_sbu2prt_cx_V_keep_V;
		delete [] wrapc_stream_size_out_sbu2prt_cx_V_keep_V;
		// release memory allocation: "sbu2prt_cx_V_last_V"
		delete [] tvout_sbu2prt_cx_V_last_V;
		delete [] tvin_sbu2prt_cx_V_last_V;
		delete [] wrapc_stream_size_out_sbu2prt_cx_V_last_V;
		// release memory allocation: "sbu2prt_cx_V_id_V"
		delete [] tvout_sbu2prt_cx_V_id_V;
		delete [] tvin_sbu2prt_cx_V_id_V;
		delete [] wrapc_stream_size_out_sbu2prt_cx_V_id_V;
		// release memory allocation: "sbu2prt_cx_V_user_V"
		delete [] tvout_sbu2prt_cx_V_user_V;
		delete [] tvin_sbu2prt_cx_V_user_V;
		delete [] wrapc_stream_size_out_sbu2prt_cx_V_user_V;
		// release memory allocation: "sbu2prt_nw_V_data_V"
		delete [] tvout_sbu2prt_nw_V_data_V;
		delete [] tvin_sbu2prt_nw_V_data_V;
		delete [] wrapc_stream_size_out_sbu2prt_nw_V_data_V;
		// release memory allocation: "sbu2prt_nw_V_keep_V"
		delete [] tvout_sbu2prt_nw_V_keep_V;
		delete [] tvin_sbu2prt_nw_V_keep_V;
		delete [] wrapc_stream_size_out_sbu2prt_nw_V_keep_V;
		// release memory allocation: "sbu2prt_nw_V_last_V"
		delete [] tvout_sbu2prt_nw_V_last_V;
		delete [] tvin_sbu2prt_nw_V_last_V;
		delete [] wrapc_stream_size_out_sbu2prt_nw_V_last_V;
		// release memory allocation: "sbu2prt_nw_V_id_V"
		delete [] tvout_sbu2prt_nw_V_id_V;
		delete [] tvin_sbu2prt_nw_V_id_V;
		delete [] wrapc_stream_size_out_sbu2prt_nw_V_id_V;
		// release memory allocation: "sbu2prt_nw_V_user_V"
		delete [] tvout_sbu2prt_nw_V_user_V;
		delete [] tvin_sbu2prt_nw_V_user_V;
		delete [] wrapc_stream_size_out_sbu2prt_nw_V_user_V;
		// release memory allocation: "sbu2mlx_V_data_V"
		delete [] tvout_sbu2mlx_V_data_V;
		delete [] tvin_sbu2mlx_V_data_V;
		delete [] wrapc_stream_size_out_sbu2mlx_V_data_V;
		// release memory allocation: "sbu2mlx_V_keep_V"
		delete [] tvout_sbu2mlx_V_keep_V;
		delete [] tvin_sbu2mlx_V_keep_V;
		delete [] wrapc_stream_size_out_sbu2mlx_V_keep_V;
		// release memory allocation: "sbu2mlx_V_last_V"
		delete [] tvout_sbu2mlx_V_last_V;
		delete [] tvin_sbu2mlx_V_last_V;
		delete [] wrapc_stream_size_out_sbu2mlx_V_last_V;
		// release memory allocation: "sbu2mlx_V_id_V"
		delete [] tvout_sbu2mlx_V_id_V;
		delete [] tvin_sbu2mlx_V_id_V;
		delete [] wrapc_stream_size_out_sbu2mlx_V_id_V;
		// release memory allocation: "sbu2mlx_V_user_V"
		delete [] tvout_sbu2mlx_V_user_V;
		delete [] tvin_sbu2mlx_V_user_V;
		delete [] wrapc_stream_size_out_sbu2mlx_V_user_V;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

