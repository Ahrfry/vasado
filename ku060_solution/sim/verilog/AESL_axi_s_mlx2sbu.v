// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

`define TV_IN_mlx2sbu_TDATA "../tv/cdatafile/c.example.autotvin_mlx2sbu_V_data_V.dat"
`define INGRESS_STATUS_mlx2sbu_TDATA "../tv/stream_size/stream_ingress_status_mlx2sbu_V_data_V.dat"
`define TV_IN_mlx2sbu_TKEEP "../tv/cdatafile/c.example.autotvin_mlx2sbu_V_keep_V.dat"
`define INGRESS_STATUS_mlx2sbu_TKEEP "../tv/stream_size/stream_ingress_status_mlx2sbu_V_keep_V.dat"
`define TV_IN_mlx2sbu_TLAST "../tv/cdatafile/c.example.autotvin_mlx2sbu_V_last_V.dat"
`define INGRESS_STATUS_mlx2sbu_TLAST "../tv/stream_size/stream_ingress_status_mlx2sbu_V_last_V.dat"
`define TV_IN_mlx2sbu_TID "../tv/cdatafile/c.example.autotvin_mlx2sbu_V_id_V.dat"
`define INGRESS_STATUS_mlx2sbu_TID "../tv/stream_size/stream_ingress_status_mlx2sbu_V_id_V.dat"
`define TV_IN_mlx2sbu_TUSER "../tv/cdatafile/c.example.autotvin_mlx2sbu_V_user_V.dat"
`define INGRESS_STATUS_mlx2sbu_TUSER "../tv/stream_size/stream_ingress_status_mlx2sbu_V_user_V.dat"

`define AUTOTB_TRANSACTION_NUM 218

module AESL_axi_s_mlx2sbu (
    input clk,
    input reset,
    output [256 - 1:0] TRAN_mlx2sbu_TDATA,
    output [32 - 1:0] TRAN_mlx2sbu_TKEEP,
    output TRAN_mlx2sbu_TLAST,
    output [3 - 1:0] TRAN_mlx2sbu_TID,
    output [12 - 1:0] TRAN_mlx2sbu_TUSER,
    output TRAN_mlx2sbu_TVALID,
    input TRAN_mlx2sbu_TREADY,
    input ready,
    input done,
    output [31:0] transaction);

    wire TRAN_mlx2sbu_TVALID_temp;
    wire mlx2sbu_TDATA_full;
    wire mlx2sbu_TDATA_empty;
    reg mlx2sbu_TDATA_write_en;
    reg [256 - 1:0] mlx2sbu_TDATA_write_data;
    reg mlx2sbu_TDATA_read_en;
    wire [256 - 1:0] mlx2sbu_TDATA_read_data;
    
    fifo #(0, 256) fifo_mlx2sbu_TDATA (
        .reset(1'b0),
        .write_clock(clk),
        .write_en(mlx2sbu_TDATA_write_en),
        .write_data(mlx2sbu_TDATA_write_data),
        .read_clock(clk),
        .read_en(mlx2sbu_TDATA_read_en),
        .read_data(mlx2sbu_TDATA_read_data),
        .full(mlx2sbu_TDATA_full),
        .empty(mlx2sbu_TDATA_empty));
    
    always @ (*) begin
        mlx2sbu_TDATA_write_en <= 0;
        mlx2sbu_TDATA_read_en <= TRAN_mlx2sbu_TREADY & TRAN_mlx2sbu_TVALID;
    end
    
    assign TRAN_mlx2sbu_TDATA = mlx2sbu_TDATA_read_data;
    wire mlx2sbu_TKEEP_full;
    wire mlx2sbu_TKEEP_empty;
    reg mlx2sbu_TKEEP_write_en;
    reg [32 - 1:0] mlx2sbu_TKEEP_write_data;
    reg mlx2sbu_TKEEP_read_en;
    wire [32 - 1:0] mlx2sbu_TKEEP_read_data;
    
    fifo #(0, 32) fifo_mlx2sbu_TKEEP (
        .reset(1'b0),
        .write_clock(clk),
        .write_en(mlx2sbu_TKEEP_write_en),
        .write_data(mlx2sbu_TKEEP_write_data),
        .read_clock(clk),
        .read_en(mlx2sbu_TKEEP_read_en),
        .read_data(mlx2sbu_TKEEP_read_data),
        .full(mlx2sbu_TKEEP_full),
        .empty(mlx2sbu_TKEEP_empty));
    
    always @ (*) begin
        mlx2sbu_TKEEP_write_en <= 0;
        mlx2sbu_TKEEP_read_en <= TRAN_mlx2sbu_TREADY & TRAN_mlx2sbu_TVALID;
    end
    
    assign TRAN_mlx2sbu_TKEEP = mlx2sbu_TKEEP_read_data;
    wire mlx2sbu_TLAST_full;
    wire mlx2sbu_TLAST_empty;
    reg mlx2sbu_TLAST_write_en;
    reg [1 - 1:0] mlx2sbu_TLAST_write_data;
    reg mlx2sbu_TLAST_read_en;
    wire [1 - 1:0] mlx2sbu_TLAST_read_data;
    
    fifo #(0, 1) fifo_mlx2sbu_TLAST (
        .reset(1'b0),
        .write_clock(clk),
        .write_en(mlx2sbu_TLAST_write_en),
        .write_data(mlx2sbu_TLAST_write_data),
        .read_clock(clk),
        .read_en(mlx2sbu_TLAST_read_en),
        .read_data(mlx2sbu_TLAST_read_data),
        .full(mlx2sbu_TLAST_full),
        .empty(mlx2sbu_TLAST_empty));
    
    always @ (*) begin
        mlx2sbu_TLAST_write_en <= 0;
        mlx2sbu_TLAST_read_en <= TRAN_mlx2sbu_TREADY & TRAN_mlx2sbu_TVALID;
    end
    
    assign TRAN_mlx2sbu_TLAST = mlx2sbu_TLAST_read_data;
    wire mlx2sbu_TID_full;
    wire mlx2sbu_TID_empty;
    reg mlx2sbu_TID_write_en;
    reg [3 - 1:0] mlx2sbu_TID_write_data;
    reg mlx2sbu_TID_read_en;
    wire [3 - 1:0] mlx2sbu_TID_read_data;
    
    fifo #(0, 3) fifo_mlx2sbu_TID (
        .reset(1'b0),
        .write_clock(clk),
        .write_en(mlx2sbu_TID_write_en),
        .write_data(mlx2sbu_TID_write_data),
        .read_clock(clk),
        .read_en(mlx2sbu_TID_read_en),
        .read_data(mlx2sbu_TID_read_data),
        .full(mlx2sbu_TID_full),
        .empty(mlx2sbu_TID_empty));
    
    always @ (*) begin
        mlx2sbu_TID_write_en <= 0;
        mlx2sbu_TID_read_en <= TRAN_mlx2sbu_TREADY & TRAN_mlx2sbu_TVALID;
    end
    
    assign TRAN_mlx2sbu_TID = mlx2sbu_TID_read_data;
    wire mlx2sbu_TUSER_full;
    wire mlx2sbu_TUSER_empty;
    reg mlx2sbu_TUSER_write_en;
    reg [12 - 1:0] mlx2sbu_TUSER_write_data;
    reg mlx2sbu_TUSER_read_en;
    wire [12 - 1:0] mlx2sbu_TUSER_read_data;
    
    fifo #(0, 12) fifo_mlx2sbu_TUSER (
        .reset(1'b0),
        .write_clock(clk),
        .write_en(mlx2sbu_TUSER_write_en),
        .write_data(mlx2sbu_TUSER_write_data),
        .read_clock(clk),
        .read_en(mlx2sbu_TUSER_read_en),
        .read_data(mlx2sbu_TUSER_read_data),
        .full(mlx2sbu_TUSER_full),
        .empty(mlx2sbu_TUSER_empty));
    
    always @ (*) begin
        mlx2sbu_TUSER_write_en <= 0;
        mlx2sbu_TUSER_read_en <= TRAN_mlx2sbu_TREADY & TRAN_mlx2sbu_TVALID;
    end
    
    assign TRAN_mlx2sbu_TUSER = mlx2sbu_TUSER_read_data;
    assign TRAN_mlx2sbu_TVALID = TRAN_mlx2sbu_TVALID_temp;

    
    assign TRAN_mlx2sbu_TVALID_temp = 0;
    
    function is_blank_char(input [7:0] in_char);
        if (in_char == " " || in_char == "\011" || in_char == "\012" || in_char == "\015") begin
            is_blank_char = 1;
        end else begin
            is_blank_char = 0;
        end
    endfunction
    
    function [535:0] read_token(input integer fp);
        integer ret;
        begin
            read_token = "";
                    ret = 0;
                    ret = $fscanf(fp,"%s",read_token);
        end
    endfunction
    
    function [535:0] rm_0x(input [535:0] token);
        reg [535:0] token_tmp;
        integer i;
        begin
            token_tmp = "";
            for (i = 0; token[15:0] != "0x"; token = token >> 8) begin
                token_tmp = (token[7:0] << (8 * i)) | token_tmp;
                i = i + 1;
            end
            rm_0x = token_tmp;
        end
    endfunction

endmodule
