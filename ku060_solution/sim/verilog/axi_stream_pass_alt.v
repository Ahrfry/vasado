// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module axi_stream_pass_alt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mlx2sbu_TDATA,
        mlx2sbu_TVALID,
        mlx2sbu_TREADY,
        mlx2sbu_TKEEP,
        mlx2sbu_TLAST,
        mlx2sbu_TID,
        mlx2sbu_TUSER,
        sbu2mlx_TDATA,
        sbu2mlx_TVALID,
        sbu2mlx_TREADY,
        sbu2mlx_TKEEP,
        sbu2mlx_TLAST,
        sbu2mlx_TID,
        sbu2mlx_TUSER
);

parameter    ap_ST_fsm_state1 = 2'b1;
parameter    ap_ST_fsm_state2 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_1 = 32'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] mlx2sbu_TDATA;
input   mlx2sbu_TVALID;
output   mlx2sbu_TREADY;
input  [31:0] mlx2sbu_TKEEP;
input  [0:0] mlx2sbu_TLAST;
input  [2:0] mlx2sbu_TID;
input  [11:0] mlx2sbu_TUSER;
output  [255:0] sbu2mlx_TDATA;
output   sbu2mlx_TVALID;
input   sbu2mlx_TREADY;
output  [31:0] sbu2mlx_TKEEP;
output  [0:0] sbu2mlx_TLAST;
output  [2:0] sbu2mlx_TID;
output  [11:0] sbu2mlx_TUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mlx2sbu_TREADY;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [255:0] Out_V_data_V_1_data_out;
reg    Out_V_data_V_1_vld_in;
wire    Out_V_data_V_1_vld_out;
wire    Out_V_data_V_1_ack_in;
wire    Out_V_data_V_1_ack_out;
reg   [255:0] Out_V_data_V_1_payload_A;
reg   [255:0] Out_V_data_V_1_payload_B;
reg    Out_V_data_V_1_sel_rd;
reg    Out_V_data_V_1_sel_wr;
wire    Out_V_data_V_1_sel;
wire    Out_V_data_V_1_load_A;
wire    Out_V_data_V_1_load_B;
reg   [1:0] Out_V_data_V_1_state;
wire    Out_V_data_V_1_state_cmp_full;
reg   [31:0] Out_V_keep_V_1_data_out;
reg    Out_V_keep_V_1_vld_in;
wire    Out_V_keep_V_1_vld_out;
wire    Out_V_keep_V_1_ack_in;
wire    Out_V_keep_V_1_ack_out;
reg   [31:0] Out_V_keep_V_1_payload_A;
reg   [31:0] Out_V_keep_V_1_payload_B;
reg    Out_V_keep_V_1_sel_rd;
reg    Out_V_keep_V_1_sel_wr;
wire    Out_V_keep_V_1_sel;
wire    Out_V_keep_V_1_load_A;
wire    Out_V_keep_V_1_load_B;
reg   [1:0] Out_V_keep_V_1_state;
wire    Out_V_keep_V_1_state_cmp_full;
reg   [0:0] Out_V_last_V_1_data_out;
reg    Out_V_last_V_1_vld_in;
wire    Out_V_last_V_1_vld_out;
wire    Out_V_last_V_1_ack_in;
wire    Out_V_last_V_1_ack_out;
reg   [0:0] Out_V_last_V_1_payload_A;
reg   [0:0] Out_V_last_V_1_payload_B;
reg    Out_V_last_V_1_sel_rd;
reg    Out_V_last_V_1_sel_wr;
wire    Out_V_last_V_1_sel;
wire    Out_V_last_V_1_load_A;
wire    Out_V_last_V_1_load_B;
reg   [1:0] Out_V_last_V_1_state;
wire    Out_V_last_V_1_state_cmp_full;
reg   [2:0] Out_V_id_V_1_data_out;
reg    Out_V_id_V_1_vld_in;
wire    Out_V_id_V_1_vld_out;
wire    Out_V_id_V_1_ack_in;
wire    Out_V_id_V_1_ack_out;
reg   [2:0] Out_V_id_V_1_payload_A;
reg   [2:0] Out_V_id_V_1_payload_B;
reg    Out_V_id_V_1_sel_rd;
reg    Out_V_id_V_1_sel_wr;
wire    Out_V_id_V_1_sel;
wire    Out_V_id_V_1_load_A;
wire    Out_V_id_V_1_load_B;
reg   [1:0] Out_V_id_V_1_state;
wire    Out_V_id_V_1_state_cmp_full;
reg   [11:0] Out_V_user_V_1_data_out;
reg    Out_V_user_V_1_vld_in;
wire    Out_V_user_V_1_vld_out;
wire    Out_V_user_V_1_ack_in;
wire    Out_V_user_V_1_ack_out;
reg   [11:0] Out_V_user_V_1_payload_A;
reg   [11:0] Out_V_user_V_1_payload_B;
reg    Out_V_user_V_1_sel_rd;
reg    Out_V_user_V_1_sel_wr;
wire    Out_V_user_V_1_sel;
wire    Out_V_user_V_1_load_A;
wire    Out_V_user_V_1_load_B;
reg   [1:0] Out_V_user_V_1_state;
wire    Out_V_user_V_1_state_cmp_full;
reg    mlx2sbu_TDATA_blk_n;
wire   [0:0] tmp_nbreadreq_fu_38_p7;
reg    sbu2mlx_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_state2;
reg   [0:0] tmp_reg_112;
reg    ap_condition_346;
reg    ap_condition_391;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'b1;
#0 Out_V_data_V_1_sel_rd = 1'b0;
#0 Out_V_data_V_1_sel_wr = 1'b0;
#0 Out_V_data_V_1_state = 2'b00;
#0 Out_V_keep_V_1_sel_rd = 1'b0;
#0 Out_V_keep_V_1_sel_wr = 1'b0;
#0 Out_V_keep_V_1_state = 2'b00;
#0 Out_V_last_V_1_sel_rd = 1'b0;
#0 Out_V_last_V_1_sel_wr = 1'b0;
#0 Out_V_last_V_1_state = 2'b00;
#0 Out_V_id_V_1_sel_rd = 1'b0;
#0 Out_V_id_V_1_sel_wr = 1'b0;
#0 Out_V_id_V_1_state = 2'b00;
#0 Out_V_user_V_1_sel_rd = 1'b0;
#0 Out_V_user_V_1_sel_wr = 1'b0;
#0 Out_V_user_V_1_state = 2'b00;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == Out_V_data_V_1_ack_out) & (1'b1 == Out_V_data_V_1_vld_out))) begin
            Out_V_data_V_1_sel_rd <= ~Out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == Out_V_data_V_1_vld_in) & (1'b1 == Out_V_data_V_1_ack_in))) begin
            Out_V_data_V_1_sel_wr <= ~Out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == Out_V_data_V_1_vld_in) & (1'b1 == Out_V_data_V_1_ack_out) & (Out_V_data_V_1_state == ap_const_lv2_3)) | ((1'b0 == Out_V_data_V_1_vld_in) & (Out_V_data_V_1_state == ap_const_lv2_2)))) begin
            Out_V_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == Out_V_data_V_1_vld_in) & (1'b0 == Out_V_data_V_1_ack_out) & (Out_V_data_V_1_state == ap_const_lv2_3)) | ((1'b0 == Out_V_data_V_1_ack_out) & (Out_V_data_V_1_state == ap_const_lv2_1)))) begin
            Out_V_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == Out_V_data_V_1_vld_in) & (Out_V_data_V_1_state == ap_const_lv2_2)) | ((1'b1 == Out_V_data_V_1_ack_out) & (Out_V_data_V_1_state == ap_const_lv2_1)) | ((Out_V_data_V_1_state == ap_const_lv2_3) & ~((1'b1 == Out_V_data_V_1_vld_in) & (1'b0 == Out_V_data_V_1_ack_out)) & ~((1'b0 == Out_V_data_V_1_vld_in) & (1'b1 == Out_V_data_V_1_ack_out))))) begin
            Out_V_data_V_1_state <= ap_const_lv2_3;
        end else begin
            Out_V_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == Out_V_id_V_1_ack_out) & (1'b1 == Out_V_id_V_1_vld_out))) begin
            Out_V_id_V_1_sel_rd <= ~Out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == Out_V_id_V_1_vld_in) & (1'b1 == Out_V_id_V_1_ack_in))) begin
            Out_V_id_V_1_sel_wr <= ~Out_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_id_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == Out_V_id_V_1_vld_in) & (1'b1 == Out_V_id_V_1_ack_out) & (ap_const_lv2_3 == Out_V_id_V_1_state)) | ((1'b0 == Out_V_id_V_1_vld_in) & (ap_const_lv2_2 == Out_V_id_V_1_state)))) begin
            Out_V_id_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == Out_V_id_V_1_vld_in) & (1'b0 == Out_V_id_V_1_ack_out) & (ap_const_lv2_3 == Out_V_id_V_1_state)) | ((1'b0 == Out_V_id_V_1_ack_out) & (ap_const_lv2_1 == Out_V_id_V_1_state)))) begin
            Out_V_id_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == Out_V_id_V_1_vld_in) & (ap_const_lv2_2 == Out_V_id_V_1_state)) | ((1'b1 == Out_V_id_V_1_ack_out) & (ap_const_lv2_1 == Out_V_id_V_1_state)) | ((ap_const_lv2_3 == Out_V_id_V_1_state) & ~((1'b1 == Out_V_id_V_1_vld_in) & (1'b0 == Out_V_id_V_1_ack_out)) & ~((1'b0 == Out_V_id_V_1_vld_in) & (1'b1 == Out_V_id_V_1_ack_out))))) begin
            Out_V_id_V_1_state <= ap_const_lv2_3;
        end else begin
            Out_V_id_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == Out_V_keep_V_1_ack_out) & (1'b1 == Out_V_keep_V_1_vld_out))) begin
            Out_V_keep_V_1_sel_rd <= ~Out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == Out_V_keep_V_1_vld_in) & (1'b1 == Out_V_keep_V_1_ack_in))) begin
            Out_V_keep_V_1_sel_wr <= ~Out_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_keep_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == Out_V_keep_V_1_vld_in) & (1'b1 == Out_V_keep_V_1_ack_out) & (ap_const_lv2_3 == Out_V_keep_V_1_state)) | ((1'b0 == Out_V_keep_V_1_vld_in) & (ap_const_lv2_2 == Out_V_keep_V_1_state)))) begin
            Out_V_keep_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == Out_V_keep_V_1_vld_in) & (1'b0 == Out_V_keep_V_1_ack_out) & (ap_const_lv2_3 == Out_V_keep_V_1_state)) | ((1'b0 == Out_V_keep_V_1_ack_out) & (ap_const_lv2_1 == Out_V_keep_V_1_state)))) begin
            Out_V_keep_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == Out_V_keep_V_1_vld_in) & (ap_const_lv2_2 == Out_V_keep_V_1_state)) | ((1'b1 == Out_V_keep_V_1_ack_out) & (ap_const_lv2_1 == Out_V_keep_V_1_state)) | ((ap_const_lv2_3 == Out_V_keep_V_1_state) & ~((1'b1 == Out_V_keep_V_1_vld_in) & (1'b0 == Out_V_keep_V_1_ack_out)) & ~((1'b0 == Out_V_keep_V_1_vld_in) & (1'b1 == Out_V_keep_V_1_ack_out))))) begin
            Out_V_keep_V_1_state <= ap_const_lv2_3;
        end else begin
            Out_V_keep_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == Out_V_last_V_1_ack_out) & (1'b1 == Out_V_last_V_1_vld_out))) begin
            Out_V_last_V_1_sel_rd <= ~Out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == Out_V_last_V_1_vld_in) & (1'b1 == Out_V_last_V_1_ack_in))) begin
            Out_V_last_V_1_sel_wr <= ~Out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_last_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == Out_V_last_V_1_vld_in) & (1'b1 == Out_V_last_V_1_ack_out) & (ap_const_lv2_3 == Out_V_last_V_1_state)) | ((1'b0 == Out_V_last_V_1_vld_in) & (ap_const_lv2_2 == Out_V_last_V_1_state)))) begin
            Out_V_last_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == Out_V_last_V_1_vld_in) & (1'b0 == Out_V_last_V_1_ack_out) & (ap_const_lv2_3 == Out_V_last_V_1_state)) | ((1'b0 == Out_V_last_V_1_ack_out) & (ap_const_lv2_1 == Out_V_last_V_1_state)))) begin
            Out_V_last_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == Out_V_last_V_1_vld_in) & (ap_const_lv2_2 == Out_V_last_V_1_state)) | ((1'b1 == Out_V_last_V_1_ack_out) & (ap_const_lv2_1 == Out_V_last_V_1_state)) | ((ap_const_lv2_3 == Out_V_last_V_1_state) & ~((1'b1 == Out_V_last_V_1_vld_in) & (1'b0 == Out_V_last_V_1_ack_out)) & ~((1'b0 == Out_V_last_V_1_vld_in) & (1'b1 == Out_V_last_V_1_ack_out))))) begin
            Out_V_last_V_1_state <= ap_const_lv2_3;
        end else begin
            Out_V_last_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == Out_V_user_V_1_ack_out) & (1'b1 == Out_V_user_V_1_vld_out))) begin
            Out_V_user_V_1_sel_rd <= ~Out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == Out_V_user_V_1_vld_in) & (1'b1 == Out_V_user_V_1_ack_in))) begin
            Out_V_user_V_1_sel_wr <= ~Out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        Out_V_user_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == Out_V_user_V_1_vld_in) & (1'b1 == Out_V_user_V_1_ack_out) & (ap_const_lv2_3 == Out_V_user_V_1_state)) | ((1'b0 == Out_V_user_V_1_vld_in) & (ap_const_lv2_2 == Out_V_user_V_1_state)))) begin
            Out_V_user_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == Out_V_user_V_1_vld_in) & (1'b0 == Out_V_user_V_1_ack_out) & (ap_const_lv2_3 == Out_V_user_V_1_state)) | ((1'b0 == Out_V_user_V_1_ack_out) & (ap_const_lv2_1 == Out_V_user_V_1_state)))) begin
            Out_V_user_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == Out_V_user_V_1_vld_in) & (ap_const_lv2_2 == Out_V_user_V_1_state)) | ((1'b1 == Out_V_user_V_1_ack_out) & (ap_const_lv2_1 == Out_V_user_V_1_state)) | ((ap_const_lv2_3 == Out_V_user_V_1_state) & ~((1'b1 == Out_V_user_V_1_vld_in) & (1'b0 == Out_V_user_V_1_ack_out)) & ~((1'b0 == Out_V_user_V_1_vld_in) & (1'b1 == Out_V_user_V_1_ack_out))))) begin
            Out_V_user_V_1_state <= ap_const_lv2_3;
        end else begin
            Out_V_user_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == Out_V_data_V_1_load_A)) begin
        Out_V_data_V_1_payload_A <= mlx2sbu_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == Out_V_data_V_1_load_B)) begin
        Out_V_data_V_1_payload_B <= mlx2sbu_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == Out_V_id_V_1_load_A)) begin
        Out_V_id_V_1_payload_A <= mlx2sbu_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == Out_V_id_V_1_load_B)) begin
        Out_V_id_V_1_payload_B <= mlx2sbu_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == Out_V_keep_V_1_load_A)) begin
        Out_V_keep_V_1_payload_A <= mlx2sbu_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == Out_V_keep_V_1_load_B)) begin
        Out_V_keep_V_1_payload_B <= mlx2sbu_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == Out_V_last_V_1_load_A)) begin
        Out_V_last_V_1_payload_A <= mlx2sbu_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == Out_V_last_V_1_load_B)) begin
        Out_V_last_V_1_payload_B <= mlx2sbu_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == Out_V_user_V_1_load_A)) begin
        Out_V_user_V_1_payload_A <= mlx2sbu_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == Out_V_user_V_1_load_B)) begin
        Out_V_user_V_1_payload_B <= mlx2sbu_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_condition_346 == 1'b1) | (~(1'b0 == tmp_nbreadreq_fu_38_p7) & (1'b0 == Out_V_data_V_1_ack_in))))) begin
        tmp_reg_112 <= tmp_nbreadreq_fu_38_p7;
    end
end

always @ (*) begin
    if ((1'b1 == Out_V_data_V_1_sel)) begin
        Out_V_data_V_1_data_out = Out_V_data_V_1_payload_B;
    end else begin
        Out_V_data_V_1_data_out = Out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(1'b0 == tmp_nbreadreq_fu_38_p7) & ~((ap_condition_346 == 1'b1) | (~(1'b0 == tmp_nbreadreq_fu_38_p7) & (1'b0 == Out_V_data_V_1_ack_in))))) begin
        Out_V_data_V_1_vld_in = 1'b1;
    end else begin
        Out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == Out_V_id_V_1_sel)) begin
        Out_V_id_V_1_data_out = Out_V_id_V_1_payload_B;
    end else begin
        Out_V_id_V_1_data_out = Out_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(1'b0 == tmp_nbreadreq_fu_38_p7) & ~((ap_condition_346 == 1'b1) | (~(1'b0 == tmp_nbreadreq_fu_38_p7) & (1'b0 == Out_V_data_V_1_ack_in))))) begin
        Out_V_id_V_1_vld_in = 1'b1;
    end else begin
        Out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == Out_V_keep_V_1_sel)) begin
        Out_V_keep_V_1_data_out = Out_V_keep_V_1_payload_B;
    end else begin
        Out_V_keep_V_1_data_out = Out_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(1'b0 == tmp_nbreadreq_fu_38_p7) & ~((ap_condition_346 == 1'b1) | (~(1'b0 == tmp_nbreadreq_fu_38_p7) & (1'b0 == Out_V_data_V_1_ack_in))))) begin
        Out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        Out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == Out_V_last_V_1_sel)) begin
        Out_V_last_V_1_data_out = Out_V_last_V_1_payload_B;
    end else begin
        Out_V_last_V_1_data_out = Out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(1'b0 == tmp_nbreadreq_fu_38_p7) & ~((ap_condition_346 == 1'b1) | (~(1'b0 == tmp_nbreadreq_fu_38_p7) & (1'b0 == Out_V_data_V_1_ack_in))))) begin
        Out_V_last_V_1_vld_in = 1'b1;
    end else begin
        Out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == Out_V_user_V_1_sel)) begin
        Out_V_user_V_1_data_out = Out_V_user_V_1_payload_B;
    end else begin
        Out_V_user_V_1_data_out = Out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(1'b0 == tmp_nbreadreq_fu_38_p7) & ~((ap_condition_346 == 1'b1) | (~(1'b0 == tmp_nbreadreq_fu_38_p7) & (1'b0 == Out_V_data_V_1_ack_in))))) begin
        Out_V_user_V_1_vld_in = 1'b1;
    end else begin
        Out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & ~((ap_condition_391 == 1'b1) | (~(1'b0 == tmp_reg_112) & (1'b0 == Out_V_data_V_1_ack_in)))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((ap_condition_391 == 1'b1) | (~(1'b0 == tmp_reg_112) & (1'b0 == Out_V_data_V_1_ack_in))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~(1'b0 == tmp_nbreadreq_fu_38_p7))) begin
        mlx2sbu_TDATA_blk_n = mlx2sbu_TVALID;
    end else begin
        mlx2sbu_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(1'b0 == tmp_nbreadreq_fu_38_p7) & ~((ap_condition_346 == 1'b1) | (~(1'b0 == tmp_nbreadreq_fu_38_p7) & (1'b0 == Out_V_data_V_1_ack_in))))) begin
        mlx2sbu_TREADY = 1'b1;
    end else begin
        mlx2sbu_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~(1'b0 == tmp_nbreadreq_fu_38_p7)) | ((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == tmp_reg_112)))) begin
        sbu2mlx_TDATA_blk_n = Out_V_data_V_1_state[1'b1];
    end else begin
        sbu2mlx_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~((ap_condition_346 == 1'b1) | (~(1'b0 == tmp_nbreadreq_fu_38_p7) & (1'b0 == Out_V_data_V_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~((ap_condition_391 == 1'b1) | (~(1'b0 == tmp_reg_112) & (1'b0 == Out_V_data_V_1_ack_in)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Out_V_data_V_1_ack_in = Out_V_data_V_1_state[1'b1];

assign Out_V_data_V_1_ack_out = sbu2mlx_TREADY;

assign Out_V_data_V_1_load_A = (Out_V_data_V_1_state_cmp_full & ~Out_V_data_V_1_sel_wr);

assign Out_V_data_V_1_load_B = (Out_V_data_V_1_sel_wr & Out_V_data_V_1_state_cmp_full);

assign Out_V_data_V_1_sel = Out_V_data_V_1_sel_rd;

assign Out_V_data_V_1_state_cmp_full = ((Out_V_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign Out_V_data_V_1_vld_out = Out_V_data_V_1_state[1'b0];

assign Out_V_id_V_1_ack_in = Out_V_id_V_1_state[1'b1];

assign Out_V_id_V_1_ack_out = sbu2mlx_TREADY;

assign Out_V_id_V_1_load_A = (Out_V_id_V_1_state_cmp_full & ~Out_V_id_V_1_sel_wr);

assign Out_V_id_V_1_load_B = (Out_V_id_V_1_sel_wr & Out_V_id_V_1_state_cmp_full);

assign Out_V_id_V_1_sel = Out_V_id_V_1_sel_rd;

assign Out_V_id_V_1_state_cmp_full = ((Out_V_id_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign Out_V_id_V_1_vld_out = Out_V_id_V_1_state[1'b0];

assign Out_V_keep_V_1_ack_in = Out_V_keep_V_1_state[1'b1];

assign Out_V_keep_V_1_ack_out = sbu2mlx_TREADY;

assign Out_V_keep_V_1_load_A = (Out_V_keep_V_1_state_cmp_full & ~Out_V_keep_V_1_sel_wr);

assign Out_V_keep_V_1_load_B = (Out_V_keep_V_1_sel_wr & Out_V_keep_V_1_state_cmp_full);

assign Out_V_keep_V_1_sel = Out_V_keep_V_1_sel_rd;

assign Out_V_keep_V_1_state_cmp_full = ((Out_V_keep_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign Out_V_keep_V_1_vld_out = Out_V_keep_V_1_state[1'b0];

assign Out_V_last_V_1_ack_in = Out_V_last_V_1_state[1'b1];

assign Out_V_last_V_1_ack_out = sbu2mlx_TREADY;

assign Out_V_last_V_1_load_A = (Out_V_last_V_1_state_cmp_full & ~Out_V_last_V_1_sel_wr);

assign Out_V_last_V_1_load_B = (Out_V_last_V_1_sel_wr & Out_V_last_V_1_state_cmp_full);

assign Out_V_last_V_1_sel = Out_V_last_V_1_sel_rd;

assign Out_V_last_V_1_state_cmp_full = ((Out_V_last_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign Out_V_last_V_1_vld_out = Out_V_last_V_1_state[1'b0];

assign Out_V_user_V_1_ack_in = Out_V_user_V_1_state[1'b1];

assign Out_V_user_V_1_ack_out = sbu2mlx_TREADY;

assign Out_V_user_V_1_load_A = (Out_V_user_V_1_state_cmp_full & ~Out_V_user_V_1_sel_wr);

assign Out_V_user_V_1_load_B = (Out_V_user_V_1_sel_wr & Out_V_user_V_1_state_cmp_full);

assign Out_V_user_V_1_sel = Out_V_user_V_1_sel_rd;

assign Out_V_user_V_1_state_cmp_full = ((Out_V_user_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign Out_V_user_V_1_vld_out = Out_V_user_V_1_state[1'b0];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

always @ (*) begin
    ap_condition_346 = ((ap_start == 1'b0) | (~(1'b0 == tmp_nbreadreq_fu_38_p7) & (mlx2sbu_TVALID == 1'b0)));
end

always @ (*) begin
    ap_condition_391 = ((Out_V_data_V_1_ack_in == 1'b0) | (Out_V_keep_V_1_ack_in == 1'b0) | (Out_V_last_V_1_ack_in == 1'b0) | (Out_V_id_V_1_ack_in == 1'b0) | (Out_V_user_V_1_ack_in == 1'b0));
end

assign sbu2mlx_TDATA = Out_V_data_V_1_data_out;

assign sbu2mlx_TID = Out_V_id_V_1_data_out;

assign sbu2mlx_TKEEP = Out_V_keep_V_1_data_out;

assign sbu2mlx_TLAST = Out_V_last_V_1_data_out;

assign sbu2mlx_TUSER = Out_V_user_V_1_data_out;

assign sbu2mlx_TVALID = Out_V_user_V_1_state[1'b0];

assign tmp_nbreadreq_fu_38_p7 = mlx2sbu_TVALID;

endmodule //axi_stream_pass_alt
