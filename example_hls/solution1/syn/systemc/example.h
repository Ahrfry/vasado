// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _example_HH_
#define _example_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "example_Block_codeRepl951_proc.h"

namespace ap_rtl {

struct example : public sc_module {
    // Port declarations 48
    sc_in< sc_lv<256> > prt_nw2sbu_TDATA;
    sc_in< sc_lv<32> > prt_nw2sbu_TKEEP;
    sc_in< sc_lv<1> > prt_nw2sbu_TLAST;
    sc_in< sc_lv<3> > prt_nw2sbu_TID;
    sc_in< sc_lv<12> > prt_nw2sbu_TUSER;
    sc_in< sc_lv<256> > prt_cx2sbu_TDATA;
    sc_in< sc_lv<32> > prt_cx2sbu_TKEEP;
    sc_in< sc_lv<1> > prt_cx2sbu_TLAST;
    sc_in< sc_lv<3> > prt_cx2sbu_TID;
    sc_in< sc_lv<12> > prt_cx2sbu_TUSER;
    sc_in< sc_lv<256> > mlx2sbu_TDATA;
    sc_in< sc_lv<32> > mlx2sbu_TKEEP;
    sc_in< sc_lv<1> > mlx2sbu_TLAST;
    sc_in< sc_lv<3> > mlx2sbu_TID;
    sc_in< sc_lv<12> > mlx2sbu_TUSER;
    sc_out< sc_lv<256> > sbu2prt_cx_TDATA;
    sc_out< sc_lv<32> > sbu2prt_cx_TKEEP;
    sc_out< sc_lv<1> > sbu2prt_cx_TLAST;
    sc_out< sc_lv<3> > sbu2prt_cx_TID;
    sc_out< sc_lv<12> > sbu2prt_cx_TUSER;
    sc_out< sc_lv<256> > sbu2prt_nw_TDATA;
    sc_out< sc_lv<32> > sbu2prt_nw_TKEEP;
    sc_out< sc_lv<1> > sbu2prt_nw_TLAST;
    sc_out< sc_lv<3> > sbu2prt_nw_TID;
    sc_out< sc_lv<12> > sbu2prt_nw_TUSER;
    sc_out< sc_lv<256> > sbu2mlx_TDATA;
    sc_out< sc_lv<32> > sbu2mlx_TKEEP;
    sc_out< sc_lv<1> > sbu2mlx_TLAST;
    sc_out< sc_lv<3> > sbu2mlx_TID;
    sc_out< sc_lv<12> > sbu2mlx_TUSER;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > prt_nw2sbu_TVALID;
    sc_out< sc_logic > prt_nw2sbu_TREADY;
    sc_in< sc_logic > prt_cx2sbu_TVALID;
    sc_out< sc_logic > prt_cx2sbu_TREADY;
    sc_in< sc_logic > mlx2sbu_TVALID;
    sc_out< sc_logic > mlx2sbu_TREADY;
    sc_out< sc_logic > sbu2mlx_TVALID;
    sc_in< sc_logic > sbu2mlx_TREADY;
    sc_out< sc_logic > sbu2prt_nw_TVALID;
    sc_in< sc_logic > sbu2prt_nw_TREADY;
    sc_out< sc_logic > sbu2prt_cx_TVALID;
    sc_in< sc_logic > sbu2prt_cx_TREADY;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;


    // Module declarations
    example(sc_module_name name);
    SC_HAS_PROCESS(example);

    ~example();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    example_Block_codeRepl951_proc* example_Block_codeRepl951_proc_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > example_Block_codeRepl951_proc_U0_ap_start;
    sc_signal< sc_logic > example_Block_codeRepl951_proc_U0_ap_done;
    sc_signal< sc_logic > example_Block_codeRepl951_proc_U0_ap_continue;
    sc_signal< sc_logic > example_Block_codeRepl951_proc_U0_ap_idle;
    sc_signal< sc_logic > example_Block_codeRepl951_proc_U0_ap_ready;
    sc_signal< sc_logic > example_Block_codeRepl951_proc_U0_prt_nw2sbu_TREADY;
    sc_signal< sc_logic > example_Block_codeRepl951_proc_U0_prt_cx2sbu_TREADY;
    sc_signal< sc_logic > example_Block_codeRepl951_proc_U0_mlx2sbu_TREADY;
    sc_signal< sc_lv<256> > example_Block_codeRepl951_proc_U0_sbu2mlx_TDATA;
    sc_signal< sc_logic > example_Block_codeRepl951_proc_U0_sbu2mlx_TVALID;
    sc_signal< sc_lv<32> > example_Block_codeRepl951_proc_U0_sbu2mlx_TKEEP;
    sc_signal< sc_lv<1> > example_Block_codeRepl951_proc_U0_sbu2mlx_TLAST;
    sc_signal< sc_lv<3> > example_Block_codeRepl951_proc_U0_sbu2mlx_TID;
    sc_signal< sc_lv<12> > example_Block_codeRepl951_proc_U0_sbu2mlx_TUSER;
    sc_signal< sc_lv<256> > example_Block_codeRepl951_proc_U0_sbu2prt_nw_TDATA;
    sc_signal< sc_logic > example_Block_codeRepl951_proc_U0_sbu2prt_nw_TVALID;
    sc_signal< sc_lv<32> > example_Block_codeRepl951_proc_U0_sbu2prt_nw_TKEEP;
    sc_signal< sc_lv<1> > example_Block_codeRepl951_proc_U0_sbu2prt_nw_TLAST;
    sc_signal< sc_lv<3> > example_Block_codeRepl951_proc_U0_sbu2prt_nw_TID;
    sc_signal< sc_lv<12> > example_Block_codeRepl951_proc_U0_sbu2prt_nw_TUSER;
    sc_signal< sc_lv<256> > example_Block_codeRepl951_proc_U0_sbu2prt_cx_TDATA;
    sc_signal< sc_logic > example_Block_codeRepl951_proc_U0_sbu2prt_cx_TVALID;
    sc_signal< sc_lv<32> > example_Block_codeRepl951_proc_U0_sbu2prt_cx_TKEEP;
    sc_signal< sc_lv<1> > example_Block_codeRepl951_proc_U0_sbu2prt_cx_TLAST;
    sc_signal< sc_lv<3> > example_Block_codeRepl951_proc_U0_sbu2prt_cx_TID;
    sc_signal< sc_lv<12> > example_Block_codeRepl951_proc_U0_sbu2prt_cx_TUSER;
    sc_signal< sc_logic > ap_sig_hs_continue;
    sc_signal< sc_logic > ap_sig_hs_done;
    sc_signal< sc_logic > ap_sig_hs_ready;
    static const sc_lv<256> ap_const_lv256_lc_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_true;
    // Thread declarations
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_hs_continue();
    void thread_ap_sig_hs_done();
    void thread_ap_sig_hs_ready();
    void thread_example_Block_codeRepl951_proc_U0_ap_continue();
    void thread_example_Block_codeRepl951_proc_U0_ap_start();
    void thread_mlx2sbu_TREADY();
    void thread_prt_cx2sbu_TREADY();
    void thread_prt_nw2sbu_TREADY();
    void thread_sbu2mlx_TDATA();
    void thread_sbu2mlx_TID();
    void thread_sbu2mlx_TKEEP();
    void thread_sbu2mlx_TLAST();
    void thread_sbu2mlx_TUSER();
    void thread_sbu2mlx_TVALID();
    void thread_sbu2prt_cx_TDATA();
    void thread_sbu2prt_cx_TID();
    void thread_sbu2prt_cx_TKEEP();
    void thread_sbu2prt_cx_TLAST();
    void thread_sbu2prt_cx_TUSER();
    void thread_sbu2prt_cx_TVALID();
    void thread_sbu2prt_nw_TDATA();
    void thread_sbu2prt_nw_TID();
    void thread_sbu2prt_nw_TKEEP();
    void thread_sbu2prt_nw_TLAST();
    void thread_sbu2prt_nw_TUSER();
    void thread_sbu2prt_nw_TVALID();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
