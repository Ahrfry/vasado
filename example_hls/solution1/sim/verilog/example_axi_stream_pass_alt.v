// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module example_axi_stream_pass_alt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        In_r_TDATA,
        In_r_TVALID,
        In_r_TREADY,
        In_r_TKEEP,
        In_r_TLAST,
        In_r_TID,
        In_r_TUSER,
        Out_r_TDATA,
        Out_r_TVALID,
        Out_r_TREADY,
        Out_r_TKEEP,
        Out_r_TLAST,
        Out_r_TID,
        Out_r_TUSER,
        In_r_TDATA_blk_n,
        Out_r_TDATA_blk_n
);

parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] In_r_TDATA;
input   In_r_TVALID;
output   In_r_TREADY;
input  [31:0] In_r_TKEEP;
input  [0:0] In_r_TLAST;
input  [2:0] In_r_TID;
input  [11:0] In_r_TUSER;
output  [255:0] Out_r_TDATA;
output   Out_r_TVALID;
input   Out_r_TREADY;
output  [31:0] Out_r_TKEEP;
output  [0:0] Out_r_TLAST;
output  [2:0] Out_r_TID;
output  [11:0] Out_r_TUSER;
output   In_r_TDATA_blk_n;
output   Out_r_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg In_r_TREADY;
reg Out_r_TVALID;
reg In_r_TDATA_blk_n;
reg Out_r_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_18;
wire   [0:0] tmp_nbreadreq_fu_36_p7;
reg    ap_sig_55;
reg    ap_sig_ioackin_Out_r_TREADY;
reg    ap_reg_ioackin_Out_r_TREADY;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'b1;
#0 ap_reg_ioackin_Out_r_TREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_Out_r_TREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(tmp_nbreadreq_fu_36_p7 == 1'b0) & ~(ap_sig_55 | (~(tmp_nbreadreq_fu_36_p7 == 1'b0) & (1'b0 == ap_sig_ioackin_Out_r_TREADY))))) begin
            ap_reg_ioackin_Out_r_TREADY <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(tmp_nbreadreq_fu_36_p7 == 1'b0) & ~ap_sig_55 & (1'b1 == Out_r_TREADY))) begin
            ap_reg_ioackin_Out_r_TREADY <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(tmp_nbreadreq_fu_36_p7 == 1'b0))) begin
        In_r_TDATA_blk_n = In_r_TVALID;
    end else begin
        In_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(tmp_nbreadreq_fu_36_p7 == 1'b0) & ~(ap_sig_55 | (~(tmp_nbreadreq_fu_36_p7 == 1'b0) & (1'b0 == ap_sig_ioackin_Out_r_TREADY))))) begin
        In_r_TREADY = 1'b1;
    end else begin
        In_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(tmp_nbreadreq_fu_36_p7 == 1'b0))) begin
        Out_r_TDATA_blk_n = Out_r_TREADY;
    end else begin
        Out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(tmp_nbreadreq_fu_36_p7 == 1'b0) & ~ap_sig_55 & (1'b0 == ap_reg_ioackin_Out_r_TREADY))) begin
        Out_r_TVALID = 1'b1;
    end else begin
        Out_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_sig_55 | (~(tmp_nbreadreq_fu_36_p7 == 1'b0) & (1'b0 == ap_sig_ioackin_Out_r_TREADY)))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_sig_55 | (~(tmp_nbreadreq_fu_36_p7 == 1'b0) & (1'b0 == ap_sig_ioackin_Out_r_TREADY))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_18) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_Out_r_TREADY)) begin
        ap_sig_ioackin_Out_r_TREADY = Out_r_TREADY;
    end else begin
        ap_sig_ioackin_Out_r_TREADY = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Out_r_TDATA = In_r_TDATA;

assign Out_r_TID = In_r_TID;

assign Out_r_TKEEP = In_r_TKEEP;

assign Out_r_TLAST = In_r_TLAST;

assign Out_r_TUSER = In_r_TUSER;

always @ (*) begin
    ap_sig_18 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_55 = ((~(tmp_nbreadreq_fu_36_p7 == 1'b0) & (In_r_TVALID == 1'b0)) | (ap_start == 1'b0));
end

assign tmp_nbreadreq_fu_36_p7 = In_r_TVALID;

endmodule //example_axi_stream_pass_alt
